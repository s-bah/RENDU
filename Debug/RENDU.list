
RENDU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025d4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800275c  0800275c  0001275c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002774  08002774  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08002774  08002774  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002774  08002774  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002774  08002774  00012774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002778  08002778  00012778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800277c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000004  08002780  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08002780  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000062d5  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000ef6  00000000  00000000  00026309  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007d0  00000000  00000000  00027200  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000748  00000000  00000000  000279d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000203c3  00000000  00000000  00028118  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000416c  00000000  00000000  000484db  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b3b15  00000000  00000000  0004c647  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010015c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020a0  00000000  00000000  001001d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002744 	.word	0x08002744

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08002744 	.word	0x08002744

080001c8 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80001d0:	4b08      	ldr	r3, [pc, #32]	; (80001f4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80001d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001d4:	4907      	ldr	r1, [pc, #28]	; (80001f4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	4313      	orrs	r3, r2
 80001da:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80001de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	4013      	ands	r3, r2
 80001e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001e6:	68fb      	ldr	r3, [r7, #12]
}
 80001e8:	bf00      	nop
 80001ea:	3714      	adds	r7, #20
 80001ec:	46bd      	mov	sp, r7
 80001ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f2:	4770      	bx	lr
 80001f4:	40021000 	.word	0x40021000

080001f8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b08b      	sub	sp, #44	; 0x2c
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	60f8      	str	r0, [r7, #12]
 8000200:	60b9      	str	r1, [r7, #8]
 8000202:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	681a      	ldr	r2, [r3, #0]
 8000208:	68bb      	ldr	r3, [r7, #8]
 800020a:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800020c:	697b      	ldr	r3, [r7, #20]
 800020e:	fa93 f3a3 	rbit	r3, r3
 8000212:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000214:	693b      	ldr	r3, [r7, #16]
 8000216:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000218:	69bb      	ldr	r3, [r7, #24]
 800021a:	2b00      	cmp	r3, #0
 800021c:	d101      	bne.n	8000222 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 800021e:	2320      	movs	r3, #32
 8000220:	e003      	b.n	800022a <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8000222:	69bb      	ldr	r3, [r7, #24]
 8000224:	fab3 f383 	clz	r3, r3
 8000228:	b2db      	uxtb	r3, r3
 800022a:	005b      	lsls	r3, r3, #1
 800022c:	2103      	movs	r1, #3
 800022e:	fa01 f303 	lsl.w	r3, r1, r3
 8000232:	43db      	mvns	r3, r3
 8000234:	401a      	ands	r2, r3
 8000236:	68bb      	ldr	r3, [r7, #8]
 8000238:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800023a:	6a3b      	ldr	r3, [r7, #32]
 800023c:	fa93 f3a3 	rbit	r3, r3
 8000240:	61fb      	str	r3, [r7, #28]
  return result;
 8000242:	69fb      	ldr	r3, [r7, #28]
 8000244:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000248:	2b00      	cmp	r3, #0
 800024a:	d101      	bne.n	8000250 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800024c:	2320      	movs	r3, #32
 800024e:	e003      	b.n	8000258 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000252:	fab3 f383 	clz	r3, r3
 8000256:	b2db      	uxtb	r3, r3
 8000258:	005b      	lsls	r3, r3, #1
 800025a:	6879      	ldr	r1, [r7, #4]
 800025c:	fa01 f303 	lsl.w	r3, r1, r3
 8000260:	431a      	orrs	r2, r3
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	601a      	str	r2, [r3, #0]
}
 8000266:	bf00      	nop
 8000268:	372c      	adds	r7, #44	; 0x2c
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr

08000272 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000272:	b480      	push	{r7}
 8000274:	b085      	sub	sp, #20
 8000276:	af00      	add	r7, sp, #0
 8000278:	60f8      	str	r0, [r7, #12]
 800027a:	60b9      	str	r1, [r7, #8]
 800027c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	685a      	ldr	r2, [r3, #4]
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	43db      	mvns	r3, r3
 8000286:	401a      	ands	r2, r3
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	6879      	ldr	r1, [r7, #4]
 800028c:	fb01 f303 	mul.w	r3, r1, r3
 8000290:	431a      	orrs	r2, r3
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	605a      	str	r2, [r3, #4]
}
 8000296:	bf00      	nop
 8000298:	3714      	adds	r7, #20
 800029a:	46bd      	mov	sp, r7
 800029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a0:	4770      	bx	lr

080002a2 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80002a2:	b480      	push	{r7}
 80002a4:	b083      	sub	sp, #12
 80002a6:	af00      	add	r7, sp, #0
 80002a8:	6078      	str	r0, [r7, #4]
 80002aa:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	691a      	ldr	r2, [r3, #16]
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	4013      	ands	r3, r2
 80002b4:	683a      	ldr	r2, [r7, #0]
 80002b6:	429a      	cmp	r2, r3
 80002b8:	d101      	bne.n	80002be <LL_GPIO_IsInputPinSet+0x1c>
 80002ba:	2301      	movs	r3, #1
 80002bc:	e000      	b.n	80002c0 <LL_GPIO_IsInputPinSet+0x1e>
 80002be:	2300      	movs	r3, #0
}
 80002c0:	4618      	mov	r0, r3
 80002c2:	370c      	adds	r7, #12
 80002c4:	46bd      	mov	sp, r7
 80002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ca:	4770      	bx	lr

080002cc <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
 80002d4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	683a      	ldr	r2, [r7, #0]
 80002da:	619a      	str	r2, [r3, #24]
}
 80002dc:	bf00      	nop
 80002de:	370c      	adds	r7, #12
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr

080002e8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
 80002f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	683a      	ldr	r2, [r7, #0]
 80002f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80002f8:	bf00      	nop
 80002fa:	370c      	adds	r7, #12
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr

08000304 <GPIO_init>:
#define LED_PIN LL_GPIO_PIN_5
#define BUT_PORT GPIOC
#define BUT_PIN LL_GPIO_PIN_13

void GPIO_init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
// PORT A
LL_AHB2_GRP1_EnableClock( LL_AHB2_GRP1_PERIPH_GPIOA );
 8000308:	2001      	movs	r0, #1
 800030a:	f7ff ff5d 	bl	80001c8 <LL_AHB2_GRP1_EnableClock>
// Green LED (user LED) - PA5
LL_GPIO_SetPinMode(       LED_PORT, LED_PIN, LL_GPIO_MODE_OUTPUT );
 800030e:	2201      	movs	r2, #1
 8000310:	2120      	movs	r1, #32
 8000312:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000316:	f7ff ff6f 	bl	80001f8 <LL_GPIO_SetPinMode>
LL_GPIO_SetPinOutputType( LED_PORT, LED_PIN, LL_GPIO_OUTPUT_PUSHPULL );
 800031a:	2200      	movs	r2, #0
 800031c:	2120      	movs	r1, #32
 800031e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000322:	f7ff ffa6 	bl	8000272 <LL_GPIO_SetPinOutputType>

// PORT C
LL_AHB2_GRP1_EnableClock( LL_AHB2_GRP1_PERIPH_GPIOC );
 8000326:	2004      	movs	r0, #4
 8000328:	f7ff ff4e 	bl	80001c8 <LL_AHB2_GRP1_EnableClock>
// Blue button - PC13
LL_GPIO_SetPinMode( BUT_PORT, BUT_PIN, LL_GPIO_MODE_INPUT );
 800032c:	2200      	movs	r2, #0
 800032e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000332:	4802      	ldr	r0, [pc, #8]	; (800033c <GPIO_init+0x38>)
 8000334:	f7ff ff60 	bl	80001f8 <LL_GPIO_SetPinMode>
}
 8000338:	bf00      	nop
 800033a:	bd80      	pop	{r7, pc}
 800033c:	48000800 	.word	0x48000800

08000340 <LED_GREEN>:


void LED_GREEN( int val )
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
if	( val )
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d005      	beq.n	800035a <LED_GREEN+0x1a>
	LL_GPIO_SetOutputPin(   LED_PORT, LED_PIN );
 800034e:	2120      	movs	r1, #32
 8000350:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000354:	f7ff ffba 	bl	80002cc <LL_GPIO_SetOutputPin>
else	LL_GPIO_ResetOutputPin( LED_PORT, LED_PIN );
}
 8000358:	e004      	b.n	8000364 <LED_GREEN+0x24>
else	LL_GPIO_ResetOutputPin( LED_PORT, LED_PIN );
 800035a:	2120      	movs	r1, #32
 800035c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000360:	f7ff ffc2 	bl	80002e8 <LL_GPIO_ResetOutputPin>
}
 8000364:	bf00      	nop
 8000366:	3708      	adds	r7, #8
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}

0800036c <BLUE_BUTTON>:

int BLUE_BUTTON()
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
return ( !LL_GPIO_IsInputPinSet( BUT_PORT, BUT_PIN ) );
 8000370:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000374:	4805      	ldr	r0, [pc, #20]	; (800038c <BLUE_BUTTON+0x20>)
 8000376:	f7ff ff94 	bl	80002a2 <LL_GPIO_IsInputPinSet>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	bf0c      	ite	eq
 8000380:	2301      	moveq	r3, #1
 8000382:	2300      	movne	r3, #0
 8000384:	b2db      	uxtb	r3, r3
}
 8000386:	4618      	mov	r0, r3
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	48000800 	.word	0x48000800

08000390 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	f003 0307 	and.w	r3, r3, #7
 800039e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80003a0:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <__NVIC_SetPriorityGrouping+0x44>)
 80003a2:	68db      	ldr	r3, [r3, #12]
 80003a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80003a6:	68ba      	ldr	r2, [r7, #8]
 80003a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80003ac:	4013      	ands	r3, r2
 80003ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80003b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80003bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80003c2:	4a04      	ldr	r2, [pc, #16]	; (80003d4 <__NVIC_SetPriorityGrouping+0x44>)
 80003c4:	68bb      	ldr	r3, [r7, #8]
 80003c6:	60d3      	str	r3, [r2, #12]
}
 80003c8:	bf00      	nop
 80003ca:	3714      	adds	r7, #20
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	e000ed00 	.word	0xe000ed00

080003d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80003dc:	4b04      	ldr	r3, [pc, #16]	; (80003f0 <__NVIC_GetPriorityGrouping+0x18>)
 80003de:	68db      	ldr	r3, [r3, #12]
 80003e0:	0a1b      	lsrs	r3, r3, #8
 80003e2:	f003 0307 	and.w	r3, r3, #7
}
 80003e6:	4618      	mov	r0, r3
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr
 80003f0:	e000ed00 	.word	0xe000ed00

080003f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	4603      	mov	r3, r0
 80003fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000402:	2b00      	cmp	r3, #0
 8000404:	db0b      	blt.n	800041e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000406:	79fb      	ldrb	r3, [r7, #7]
 8000408:	f003 021f 	and.w	r2, r3, #31
 800040c:	4907      	ldr	r1, [pc, #28]	; (800042c <__NVIC_EnableIRQ+0x38>)
 800040e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000412:	095b      	lsrs	r3, r3, #5
 8000414:	2001      	movs	r0, #1
 8000416:	fa00 f202 	lsl.w	r2, r0, r2
 800041a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800041e:	bf00      	nop
 8000420:	370c      	adds	r7, #12
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	e000e100 	.word	0xe000e100

08000430 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0
 8000436:	4603      	mov	r3, r0
 8000438:	6039      	str	r1, [r7, #0]
 800043a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800043c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000440:	2b00      	cmp	r3, #0
 8000442:	db0a      	blt.n	800045a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000444:	683b      	ldr	r3, [r7, #0]
 8000446:	b2da      	uxtb	r2, r3
 8000448:	490c      	ldr	r1, [pc, #48]	; (800047c <__NVIC_SetPriority+0x4c>)
 800044a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800044e:	0112      	lsls	r2, r2, #4
 8000450:	b2d2      	uxtb	r2, r2
 8000452:	440b      	add	r3, r1
 8000454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000458:	e00a      	b.n	8000470 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800045a:	683b      	ldr	r3, [r7, #0]
 800045c:	b2da      	uxtb	r2, r3
 800045e:	4908      	ldr	r1, [pc, #32]	; (8000480 <__NVIC_SetPriority+0x50>)
 8000460:	79fb      	ldrb	r3, [r7, #7]
 8000462:	f003 030f 	and.w	r3, r3, #15
 8000466:	3b04      	subs	r3, #4
 8000468:	0112      	lsls	r2, r2, #4
 800046a:	b2d2      	uxtb	r2, r2
 800046c:	440b      	add	r3, r1
 800046e:	761a      	strb	r2, [r3, #24]
}
 8000470:	bf00      	nop
 8000472:	370c      	adds	r7, #12
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr
 800047c:	e000e100 	.word	0xe000e100
 8000480:	e000ed00 	.word	0xe000ed00

08000484 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000484:	b480      	push	{r7}
 8000486:	b089      	sub	sp, #36	; 0x24
 8000488:	af00      	add	r7, sp, #0
 800048a:	60f8      	str	r0, [r7, #12]
 800048c:	60b9      	str	r1, [r7, #8]
 800048e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	f003 0307 	and.w	r3, r3, #7
 8000496:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000498:	69fb      	ldr	r3, [r7, #28]
 800049a:	f1c3 0307 	rsb	r3, r3, #7
 800049e:	2b04      	cmp	r3, #4
 80004a0:	bf28      	it	cs
 80004a2:	2304      	movcs	r3, #4
 80004a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80004a6:	69fb      	ldr	r3, [r7, #28]
 80004a8:	3304      	adds	r3, #4
 80004aa:	2b06      	cmp	r3, #6
 80004ac:	d902      	bls.n	80004b4 <NVIC_EncodePriority+0x30>
 80004ae:	69fb      	ldr	r3, [r7, #28]
 80004b0:	3b03      	subs	r3, #3
 80004b2:	e000      	b.n	80004b6 <NVIC_EncodePriority+0x32>
 80004b4:	2300      	movs	r3, #0
 80004b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004b8:	f04f 32ff 	mov.w	r2, #4294967295
 80004bc:	69bb      	ldr	r3, [r7, #24]
 80004be:	fa02 f303 	lsl.w	r3, r2, r3
 80004c2:	43da      	mvns	r2, r3
 80004c4:	68bb      	ldr	r3, [r7, #8]
 80004c6:	401a      	ands	r2, r3
 80004c8:	697b      	ldr	r3, [r7, #20]
 80004ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80004cc:	f04f 31ff 	mov.w	r1, #4294967295
 80004d0:	697b      	ldr	r3, [r7, #20]
 80004d2:	fa01 f303 	lsl.w	r3, r1, r3
 80004d6:	43d9      	mvns	r1, r3
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004dc:	4313      	orrs	r3, r2
         );
}
 80004de:	4618      	mov	r0, r3
 80004e0:	3724      	adds	r7, #36	; 0x24
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
	...

080004ec <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80004f0:	4b06      	ldr	r3, [pc, #24]	; (800050c <LL_RCC_LSE_Enable+0x20>)
 80004f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80004f6:	4a05      	ldr	r2, [pc, #20]	; (800050c <LL_RCC_LSE_Enable+0x20>)
 80004f8:	f043 0301 	orr.w	r3, r3, #1
 80004fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000500:	bf00      	nop
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	40021000 	.word	0x40021000

08000510 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8000514:	4b06      	ldr	r3, [pc, #24]	; (8000530 <LL_RCC_LSE_EnableBypass+0x20>)
 8000516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800051a:	4a05      	ldr	r2, [pc, #20]	; (8000530 <LL_RCC_LSE_EnableBypass+0x20>)
 800051c:	f043 0304 	orr.w	r3, r3, #4
 8000520:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000524:	bf00      	nop
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	40021000 	.word	0x40021000

08000534 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800053c:	4b07      	ldr	r3, [pc, #28]	; (800055c <LL_RCC_LSE_SetDriveCapability+0x28>)
 800053e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000542:	f023 0218 	bic.w	r2, r3, #24
 8000546:	4905      	ldr	r1, [pc, #20]	; (800055c <LL_RCC_LSE_SetDriveCapability+0x28>)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	4313      	orrs	r3, r2
 800054c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000550:	bf00      	nop
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr
 800055c:	40021000 	.word	0x40021000

08000560 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8000564:	4b07      	ldr	r3, [pc, #28]	; (8000584 <LL_RCC_LSE_IsReady+0x24>)
 8000566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800056a:	f003 0302 	and.w	r3, r3, #2
 800056e:	2b02      	cmp	r3, #2
 8000570:	d101      	bne.n	8000576 <LL_RCC_LSE_IsReady+0x16>
 8000572:	2301      	movs	r3, #1
 8000574:	e000      	b.n	8000578 <LL_RCC_LSE_IsReady+0x18>
 8000576:	2300      	movs	r3, #0
}
 8000578:	4618      	mov	r0, r3
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	40021000 	.word	0x40021000

08000588 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800058c:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <LL_RCC_MSI_Enable+0x1c>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a04      	ldr	r2, [pc, #16]	; (80005a4 <LL_RCC_MSI_Enable+0x1c>)
 8000592:	f043 0301 	orr.w	r3, r3, #1
 8000596:	6013      	str	r3, [r2, #0]
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	40021000 	.word	0x40021000

080005a8 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <LL_RCC_MSI_IsReady+0x20>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f003 0302 	and.w	r3, r3, #2
 80005b4:	2b02      	cmp	r3, #2
 80005b6:	d101      	bne.n	80005bc <LL_RCC_MSI_IsReady+0x14>
 80005b8:	2301      	movs	r3, #1
 80005ba:	e000      	b.n	80005be <LL_RCC_MSI_IsReady+0x16>
 80005bc:	2300      	movs	r3, #0
}
 80005be:	4618      	mov	r0, r3
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr
 80005c8:	40021000 	.word	0x40021000

080005cc <LL_RCC_MSI_EnablePLLMode>:
  *       ready
  * @rmtoll CR           MSIPLLEN      LL_RCC_MSI_EnablePLLMode
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_EnablePLLMode(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80005d0:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <LL_RCC_MSI_EnablePLLMode+0x1c>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a04      	ldr	r2, [pc, #16]	; (80005e8 <LL_RCC_MSI_EnablePLLMode+0x1c>)
 80005d6:	f043 0304 	orr.w	r3, r3, #4
 80005da:	6013      	str	r3, [r2, #0]
}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	40021000 	.word	0x40021000

080005ec <LL_RCC_MSI_EnableRangeSelection>:
  *       MSISRANGE
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_EnableRangeSelection
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_EnableRangeSelection(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 80005f0:	4b05      	ldr	r3, [pc, #20]	; (8000608 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a04      	ldr	r2, [pc, #16]	; (8000608 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 80005f6:	f043 0308 	orr.w	r3, r3, #8
 80005fa:	6013      	str	r3, [r2, #0]
}
 80005fc:	bf00      	nop
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	40021000 	.word	0x40021000

0800060c <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <LL_RCC_MSI_SetRange+0x24>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800061c:	4904      	ldr	r1, [pc, #16]	; (8000630 <LL_RCC_MSI_SetRange+0x24>)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4313      	orrs	r3, r2
 8000622:	600b      	str	r3, [r1, #0]
}
 8000624:	bf00      	nop
 8000626:	370c      	adds	r7, #12
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	40021000 	.word	0x40021000

08000634 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800063c:	4b07      	ldr	r3, [pc, #28]	; (800065c <LL_RCC_MSI_SetCalibTrimming+0x28>)
 800063e:	685b      	ldr	r3, [r3, #4]
 8000640:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	021b      	lsls	r3, r3, #8
 8000648:	4904      	ldr	r1, [pc, #16]	; (800065c <LL_RCC_MSI_SetCalibTrimming+0x28>)
 800064a:	4313      	orrs	r3, r2
 800064c:	604b      	str	r3, [r1, #4]
}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	40021000 	.word	0x40021000

08000660 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <LL_RCC_SetSysClkSource+0x24>)
 800066a:	689b      	ldr	r3, [r3, #8]
 800066c:	f023 0203 	bic.w	r2, r3, #3
 8000670:	4904      	ldr	r1, [pc, #16]	; (8000684 <LL_RCC_SetSysClkSource+0x24>)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4313      	orrs	r3, r2
 8000676:	608b      	str	r3, [r1, #8]
}
 8000678:	bf00      	nop
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	40021000 	.word	0x40021000

08000688 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800068c:	4b04      	ldr	r3, [pc, #16]	; (80006a0 <LL_RCC_GetSysClkSource+0x18>)
 800068e:	689b      	ldr	r3, [r3, #8]
 8000690:	f003 030c 	and.w	r3, r3, #12
}
 8000694:	4618      	mov	r0, r3
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	40021000 	.word	0x40021000

080006a4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <LL_RCC_SetAHBPrescaler+0x24>)
 80006ae:	689b      	ldr	r3, [r3, #8]
 80006b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80006b4:	4904      	ldr	r1, [pc, #16]	; (80006c8 <LL_RCC_SetAHBPrescaler+0x24>)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4313      	orrs	r3, r2
 80006ba:	608b      	str	r3, [r1, #8]
}
 80006bc:	bf00      	nop
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr
 80006c8:	40021000 	.word	0x40021000

080006cc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80006d6:	689b      	ldr	r3, [r3, #8]
 80006d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80006dc:	4904      	ldr	r1, [pc, #16]	; (80006f0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4313      	orrs	r3, r2
 80006e2:	608b      	str	r3, [r1, #8]
}
 80006e4:	bf00      	nop
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	40021000 	.word	0x40021000

080006f4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <LL_RCC_SetAPB2Prescaler+0x24>)
 80006fe:	689b      	ldr	r3, [r3, #8]
 8000700:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000704:	4904      	ldr	r1, [pc, #16]	; (8000718 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	4313      	orrs	r3, r2
 800070a:	608b      	str	r3, [r1, #8]
}
 800070c:	bf00      	nop
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	40021000 	.word	0x40021000

0800071c <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8000724:	4b07      	ldr	r3, [pc, #28]	; (8000744 <LL_RCC_SetRTCClockSource+0x28>)
 8000726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800072a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800072e:	4905      	ldr	r1, [pc, #20]	; (8000744 <LL_RCC_SetRTCClockSource+0x28>)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	4313      	orrs	r3, r2
 8000734:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000738:	bf00      	nop
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	40021000 	.word	0x40021000

08000748 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <LL_RCC_EnableRTC+0x20>)
 800074e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000752:	4a05      	ldr	r2, [pc, #20]	; (8000768 <LL_RCC_EnableRTC+0x20>)
 8000754:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000758:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	40021000 	.word	0x40021000

0800076c <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <LL_RCC_ForceBackupDomainReset+0x20>)
 8000772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000776:	4a05      	ldr	r2, [pc, #20]	; (800078c <LL_RCC_ForceBackupDomainReset+0x20>)
 8000778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800077c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	40021000 	.word	0x40021000

08000790 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <LL_RCC_ReleaseBackupDomainReset+0x20>)
 8000796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800079a:	4a05      	ldr	r2, [pc, #20]	; (80007b0 <LL_RCC_ReleaseBackupDomainReset+0x20>)
 800079c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80007a4:	bf00      	nop
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	40021000 	.word	0x40021000

080007b4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80007b8:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <LL_RCC_PLL_Enable+0x1c>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a04      	ldr	r2, [pc, #16]	; (80007d0 <LL_RCC_PLL_Enable+0x1c>)
 80007be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007c2:	6013      	str	r3, [r2, #0]
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	40021000 	.word	0x40021000

080007d4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 80007d8:	4b07      	ldr	r3, [pc, #28]	; (80007f8 <LL_RCC_PLL_IsReady+0x24>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80007e4:	d101      	bne.n	80007ea <LL_RCC_PLL_IsReady+0x16>
 80007e6:	2301      	movs	r3, #1
 80007e8:	e000      	b.n	80007ec <LL_RCC_PLL_IsReady+0x18>
 80007ea:	2300      	movs	r3, #0
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	40021000 	.word	0x40021000

080007fc <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	60f8      	str	r0, [r7, #12]
 8000804:	60b9      	str	r1, [r7, #8]
 8000806:	607a      	str	r2, [r7, #4]
 8000808:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800080a:	4b0a      	ldr	r3, [pc, #40]	; (8000834 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 800080c:	68da      	ldr	r2, [r3, #12]
 800080e:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000810:	4013      	ands	r3, r2
 8000812:	68f9      	ldr	r1, [r7, #12]
 8000814:	68ba      	ldr	r2, [r7, #8]
 8000816:	4311      	orrs	r1, r2
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	0212      	lsls	r2, r2, #8
 800081c:	4311      	orrs	r1, r2
 800081e:	683a      	ldr	r2, [r7, #0]
 8000820:	430a      	orrs	r2, r1
 8000822:	4904      	ldr	r1, [pc, #16]	; (8000834 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000824:	4313      	orrs	r3, r2
 8000826:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8000828:	bf00      	nop
 800082a:	3714      	adds	r7, #20
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	40021000 	.word	0x40021000
 8000838:	f9ff808c 	.word	0xf9ff808c

0800083c <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000840:	4b05      	ldr	r3, [pc, #20]	; (8000858 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000842:	68db      	ldr	r3, [r3, #12]
 8000844:	4a04      	ldr	r2, [pc, #16]	; (8000858 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000846:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800084a:	60d3      	str	r3, [r2, #12]
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	40021000 	.word	0x40021000

0800085c <LL_AHB2_GRP1_EnableClock>:
{
 800085c:	b480      	push	{r7}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000864:	4b08      	ldr	r3, [pc, #32]	; (8000888 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000866:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000868:	4907      	ldr	r1, [pc, #28]	; (8000888 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4313      	orrs	r3, r2
 800086e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000870:	4b05      	ldr	r3, [pc, #20]	; (8000888 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000872:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	4013      	ands	r3, r2
 8000878:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800087a:	68fb      	ldr	r3, [r7, #12]
}
 800087c:	bf00      	nop
 800087e:	3714      	adds	r7, #20
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	40021000 	.word	0x40021000

0800088c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000894:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000896:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000898:	4907      	ldr	r1, [pc, #28]	; (80008b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	4313      	orrs	r3, r2
 800089e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80008a0:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80008a2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4013      	ands	r3, r2
 80008a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008aa:	68fb      	ldr	r3, [r7, #12]
}
 80008ac:	bf00      	nop
 80008ae:	3714      	adds	r7, #20
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr
 80008b8:	40021000 	.word	0x40021000

080008bc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80008c4:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80008c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80008c8:	4907      	ldr	r1, [pc, #28]	; (80008e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4313      	orrs	r3, r2
 80008ce:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80008d0:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80008d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	4013      	ands	r3, r2
 80008d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008da:	68fb      	ldr	r3, [r7, #12]
}
 80008dc:	bf00      	nop
 80008de:	3714      	adds	r7, #20
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	40021000 	.word	0x40021000

080008ec <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <LL_FLASH_SetLatency+0x24>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f023 0207 	bic.w	r2, r3, #7
 80008fc:	4904      	ldr	r1, [pc, #16]	; (8000910 <LL_FLASH_SetLatency+0x24>)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4313      	orrs	r3, r2
 8000902:	600b      	str	r3, [r1, #0]
}
 8000904:	bf00      	nop
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	40022000 	.word	0x40022000

08000914 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000918:	4b04      	ldr	r3, [pc, #16]	; (800092c <LL_FLASH_GetLatency+0x18>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f003 0307 	and.w	r3, r3, #7
}
 8000920:	4618      	mov	r0, r3
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	40022000 	.word	0x40022000

08000930 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000938:	4b05      	ldr	r3, [pc, #20]	; (8000950 <LL_EXTI_EnableIT_0_31+0x20>)
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	4904      	ldr	r1, [pc, #16]	; (8000950 <LL_EXTI_EnableIT_0_31+0x20>)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4313      	orrs	r3, r2
 8000942:	600b      	str	r3, [r1, #0]
}
 8000944:	bf00      	nop
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr
 8000950:	40010400 	.word	0x40010400

08000954 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800095c:	4b05      	ldr	r3, [pc, #20]	; (8000974 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800095e:	689a      	ldr	r2, [r3, #8]
 8000960:	4904      	ldr	r1, [pc, #16]	; (8000974 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4313      	orrs	r3, r2
 8000966:	608b      	str	r3, [r1, #8]

}
 8000968:	bf00      	nop
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	40010400 	.word	0x40010400

08000978 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8000980:	4a04      	ldr	r2, [pc, #16]	; (8000994 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	6153      	str	r3, [r2, #20]
}
 8000986:	bf00      	nop
 8000988:	370c      	adds	r7, #12
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	40010400 	.word	0x40010400

08000998 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800099c:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <LL_SYSTICK_EnableIT+0x1c>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a04      	ldr	r2, [pc, #16]	; (80009b4 <LL_SYSTICK_EnableIT+0x1c>)
 80009a2:	f043 0302 	orr.w	r3, r3, #2
 80009a6:	6013      	str	r3, [r2, #0]
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	e000e010 	.word	0xe000e010

080009b8 <LL_SYSTICK_IsEnabledIT>:
  * @brief  Checks if the SYSTICK interrupt is enabled or disabled.
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_IsEnabledIT
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsEnabledIT(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  return (READ_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk) == (SysTick_CTRL_TICKINT_Msk));
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <LL_SYSTICK_IsEnabledIT+0x20>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f003 0302 	and.w	r3, r3, #2
 80009c4:	2b02      	cmp	r3, #2
 80009c6:	bf0c      	ite	eq
 80009c8:	2301      	moveq	r3, #1
 80009ca:	2300      	movne	r3, #0
 80009cc:	b2db      	uxtb	r3, r3
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	e000e010 	.word	0xe000e010

080009dc <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80009e0:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <LL_LPM_EnableSleep+0x1c>)
 80009e2:	691b      	ldr	r3, [r3, #16]
 80009e4:	4a04      	ldr	r2, [pc, #16]	; (80009f8 <LL_LPM_EnableSleep+0x1c>)
 80009e6:	f023 0304 	bic.w	r3, r3, #4
 80009ea:	6113      	str	r3, [r2, #16]
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <LL_PWR_EnableLowPowerRunMode>:
  * @brief  Switch the regulator from main mode to low-power mode
  * @rmtoll CR1          LPR           LL_PWR_EnableLowPowerRunMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableLowPowerRunMode(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8000a00:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <LL_PWR_EnableLowPowerRunMode+0x1c>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a04      	ldr	r2, [pc, #16]	; (8000a18 <LL_PWR_EnableLowPowerRunMode+0x1c>)
 8000a06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a0a:	6013      	str	r3, [r2, #0]
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	40007000 	.word	0x40007000

08000a1c <LL_PWR_EnterLowPowerRunMode>:
  * @brief  Switch from run main mode to run low-power mode.
  * @rmtoll CR1          LPR           LL_PWR_EnterLowPowerRunMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnterLowPowerRunMode(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  LL_PWR_EnableLowPowerRunMode();
 8000a20:	f7ff ffec 	bl	80009fc <LL_PWR_EnableLowPowerRunMode>
}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <LL_PWR_IsEnabledLowPowerRunMode>:
  * @brief  Check if the regulator is in low-power mode
  * @rmtoll CR1          LPR           LL_PWR_IsEnabledLowPowerRunMode
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledLowPowerRunMode(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_LPR) == (PWR_CR1_LPR)) ? 1UL : 0UL);
 8000a2c:	4b07      	ldr	r3, [pc, #28]	; (8000a4c <LL_PWR_IsEnabledLowPowerRunMode+0x24>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000a38:	d101      	bne.n	8000a3e <LL_PWR_IsEnabledLowPowerRunMode+0x16>
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	e000      	b.n	8000a40 <LL_PWR_IsEnabledLowPowerRunMode+0x18>
 8000a3e:	2300      	movs	r3, #0
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	40007000 	.word	0x40007000

08000a50 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8000a60:	4904      	ldr	r1, [pc, #16]	; (8000a74 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4313      	orrs	r3, r2
 8000a66:	600b      	str	r3, [r1, #0]
}
 8000a68:	bf00      	nop
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	40007000 	.word	0x40007000

08000a78 <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR1          DBP           LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000a7c:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <LL_PWR_EnableBkUpAccess+0x1c>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a04      	ldr	r2, [pc, #16]	; (8000a94 <LL_PWR_EnableBkUpAccess+0x1c>)
 8000a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a86:	6013      	str	r3, [r2, #0]
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	40007000 	.word	0x40007000

08000a98 <LL_PWR_SetPowerMode>:
  *         @arg @ref LL_PWR_MODE_STANDBY
  *         @arg @ref LL_PWR_MODE_SHUTDOWN
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 8000aa0:	4b06      	ldr	r3, [pc, #24]	; (8000abc <LL_PWR_SetPowerMode+0x24>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f023 0207 	bic.w	r2, r3, #7
 8000aa8:	4904      	ldr	r1, [pc, #16]	; (8000abc <LL_PWR_SetPowerMode+0x24>)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4313      	orrs	r3, r2
 8000aae:	600b      	str	r3, [r1, #0]
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	40007000 	.word	0x40007000

08000ac0 <LL_PWR_EnableInternWU>:
  * @brief  Enable Internal Wake-up line
  * @rmtoll CR3          EIWF          LL_PWR_EnableInternWU
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableInternWU(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_EIWF);
 8000ac4:	4b05      	ldr	r3, [pc, #20]	; (8000adc <LL_PWR_EnableInternWU+0x1c>)
 8000ac6:	689b      	ldr	r3, [r3, #8]
 8000ac8:	4a04      	ldr	r2, [pc, #16]	; (8000adc <LL_PWR_EnableInternWU+0x1c>)
 8000aca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ace:	6093      	str	r3, [r2, #8]
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	40007000 	.word	0x40007000

08000ae0 <LL_RTC_EnableInitMode>:
  * @rmtoll ISR          INIT          LL_RTC_EnableInitMode
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableInitMode(RTC_TypeDef *RTCx)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* Set the Initialization mode */
  WRITE_REG(RTCx->ISR, RTC_LL_INIT_MASK);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f04f 32ff 	mov.w	r2, #4294967295
 8000aee:	60da      	str	r2, [r3, #12]
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <LL_RTC_DisableInitMode>:
  * @rmtoll ISR          INIT          LL_RTC_DisableInitMode
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableInitMode(RTC_TypeDef *RTCx)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  /* Exit Initialization mode */
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000b0a:	60da      	str	r2, [r3, #12]
}
 8000b0c:	bf00      	nop
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <LL_RTC_EnableWriteProtection>:
  * @rmtoll RTC_WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	22ff      	movs	r2, #255	; 0xff
 8000b24:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr

08000b32 <LL_RTC_DisableWriteProtection>:
  * @rmtoll RTC_WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000b32:	b480      	push	{r7}
 8000b34:	b083      	sub	sp, #12
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	22ca      	movs	r2, #202	; 0xca
 8000b3e:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2253      	movs	r2, #83	; 0x53
 8000b44:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000b46:	bf00      	nop
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr

08000b52 <LL_RTC_WAKEUP_Enable>:
  * @rmtoll RTC_CR           WUTE          LL_RTC_WAKEUP_Enable
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_Enable(RTC_TypeDef *RTCx)
{
 8000b52:	b480      	push	{r7}
 8000b54:	b083      	sub	sp, #12
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
  SET_BIT(RTCx->CR, RTC_CR_WUTE);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	609a      	str	r2, [r3, #8]
}
 8000b66:	bf00      	nop
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <LL_RTC_WAKEUP_Disable>:
  * @rmtoll RTC_CR           WUTE          LL_RTC_WAKEUP_Disable
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_Disable(RTC_TypeDef *RTCx)
{
 8000b72:	b480      	push	{r7}
 8000b74:	b083      	sub	sp, #12
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RTCx->CR, RTC_CR_WUTE);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	689b      	ldr	r3, [r3, #8]
 8000b7e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	609a      	str	r2, [r3, #8]
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000b92:	b480      	push	{r7}
 8000b94:	b083      	sub	sp, #12
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
 8000b9a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	689b      	ldr	r3, [r3, #8]
 8000ba0:	f023 0207 	bic.w	r2, r3, #7
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	431a      	orrs	r2, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	609a      	str	r2, [r3, #8]
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <LL_RTC_WAKEUP_SetAutoReload>:
  * @param  RTCx RTC Instance
  * @param  Value Value between Min_Data=0x00 and Max_Data=0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetAutoReload(RTC_TypeDef *RTCx, uint32_t Value)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->WUTR, RTC_WUTR_WUT, Value);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	695b      	ldr	r3, [r3, #20]
 8000bc6:	0c1b      	lsrs	r3, r3, #16
 8000bc8:	041b      	lsls	r3, r3, #16
 8000bca:	683a      	ldr	r2, [r7, #0]
 8000bcc:	431a      	orrs	r2, r3
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	615a      	str	r2, [r3, #20]
}
 8000bd2:	bf00      	nop
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr

08000bde <LL_RTC_ClearFlag_WUT>:
  * @rmtoll ISR          WUTF          LL_RTC_ClearFlag_WUT
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_WUT(RTC_TypeDef *RTCx)
{
 8000bde:	b480      	push	{r7}
 8000be0:	b083      	sub	sp, #12
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_WUTF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	68db      	ldr	r3, [r3, #12]
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	f463 6290 	orn	r2, r3, #1152	; 0x480
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	60da      	str	r2, [r3, #12]
}
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <LL_RTC_IsActiveFlag_INIT>:
  * @rmtoll ISR          INITF         LL_RTC_IsActiveFlag_INIT
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_INIT(RTC_TypeDef *RTCx)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c10:	2b40      	cmp	r3, #64	; 0x40
 8000c12:	bf0c      	ite	eq
 8000c14:	2301      	moveq	r3, #1
 8000c16:	2300      	movne	r3, #0
 8000c18:	b2db      	uxtb	r3, r3
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <LL_RTC_IsActiveFlag_WUTW>:
  * @rmtoll ISR          WUTWF         LL_RTC_IsActiveFlag_WUTW
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_WUTW(RTC_TypeDef *RTCx)
{
 8000c26:	b480      	push	{r7}
 8000c28:	b083      	sub	sp, #12
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_WUTWF) == (RTC_ISR_WUTWF));
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	68db      	ldr	r3, [r3, #12]
 8000c32:	f003 0304 	and.w	r3, r3, #4
 8000c36:	2b04      	cmp	r3, #4
 8000c38:	bf0c      	ite	eq
 8000c3a:	2301      	moveq	r3, #1
 8000c3c:	2300      	movne	r3, #0
 8000c3e:	b2db      	uxtb	r3, r3
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <LL_RTC_EnableIT_WUT>:
  * @rmtoll RTC_CR          WUTIE         LL_RTC_EnableIT_WUT
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableIT_WUT(RTC_TypeDef *RTCx)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  SET_BIT(RTCx->CR, RTC_CR_WUTIE);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	689b      	ldr	r3, [r3, #8]
 8000c58:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
}
 8000c60:	bf00      	nop
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <LL_GPIO_ResetOutputPin>:
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	683a      	ldr	r2, [r7, #0]
 8000c7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	601a      	str	r2, [r3, #0]
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d028      	beq.n	8000d0a <LL_TIM_OC_DisableFast+0x62>
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	2b04      	cmp	r3, #4
 8000cbc:	d023      	beq.n	8000d06 <LL_TIM_OC_DisableFast+0x5e>
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	2b10      	cmp	r3, #16
 8000cc2:	d01e      	beq.n	8000d02 <LL_TIM_OC_DisableFast+0x5a>
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	2b40      	cmp	r3, #64	; 0x40
 8000cc8:	d019      	beq.n	8000cfe <LL_TIM_OC_DisableFast+0x56>
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cd0:	d013      	beq.n	8000cfa <LL_TIM_OC_DisableFast+0x52>
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cd8:	d00d      	beq.n	8000cf6 <LL_TIM_OC_DisableFast+0x4e>
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ce0:	d007      	beq.n	8000cf2 <LL_TIM_OC_DisableFast+0x4a>
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ce8:	d101      	bne.n	8000cee <LL_TIM_OC_DisableFast+0x46>
 8000cea:	2307      	movs	r3, #7
 8000cec:	e00e      	b.n	8000d0c <LL_TIM_OC_DisableFast+0x64>
 8000cee:	2308      	movs	r3, #8
 8000cf0:	e00c      	b.n	8000d0c <LL_TIM_OC_DisableFast+0x64>
 8000cf2:	2306      	movs	r3, #6
 8000cf4:	e00a      	b.n	8000d0c <LL_TIM_OC_DisableFast+0x64>
 8000cf6:	2305      	movs	r3, #5
 8000cf8:	e008      	b.n	8000d0c <LL_TIM_OC_DisableFast+0x64>
 8000cfa:	2304      	movs	r3, #4
 8000cfc:	e006      	b.n	8000d0c <LL_TIM_OC_DisableFast+0x64>
 8000cfe:	2303      	movs	r3, #3
 8000d00:	e004      	b.n	8000d0c <LL_TIM_OC_DisableFast+0x64>
 8000d02:	2302      	movs	r3, #2
 8000d04:	e002      	b.n	8000d0c <LL_TIM_OC_DisableFast+0x64>
 8000d06:	2301      	movs	r3, #1
 8000d08:	e000      	b.n	8000d0c <LL_TIM_OC_DisableFast+0x64>
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	73fb      	strb	r3, [r7, #15]
   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	3318      	adds	r3, #24
 8000d12:	4619      	mov	r1, r3
 8000d14:	7bfb      	ldrb	r3, [r7, #15]
 8000d16:	4a0b      	ldr	r2, [pc, #44]	; (8000d44 <LL_TIM_OC_DisableFast+0x9c>)
 8000d18:	5cd3      	ldrb	r3, [r2, r3]
 8000d1a:	440b      	add	r3, r1
 8000d1c:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	7bfb      	ldrb	r3, [r7, #15]
 8000d24:	4908      	ldr	r1, [pc, #32]	; (8000d48 <LL_TIM_OC_DisableFast+0xa0>)
 8000d26:	5ccb      	ldrb	r3, [r1, r3]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	2304      	movs	r3, #4
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	43db      	mvns	r3, r3
 8000d30:	401a      	ands	r2, r3
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	601a      	str	r2, [r3, #0]

}
 8000d36:	bf00      	nop
 8000d38:	3714      	adds	r7, #20
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	0800275c 	.word	0x0800275c
 8000d48:	08002768 	.word	0x08002768

08000d4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  if(LL_RCC_LSE_IsReady()==0){
 8000d50:	f7ff fc06 	bl	8000560 <LL_RCC_LSE_IsReady>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d11a      	bne.n	8000d90 <main+0x44>
	  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	f7ff fdae 	bl	80008bc <LL_APB2_GRP1_EnableClock>
	  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000d60:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000d64:	f7ff fd92 	bl	800088c <LL_APB1_GRP1_EnableClock>
	  LL_PWR_EnableBkUpAccess();
 8000d68:	f7ff fe86 	bl	8000a78 <LL_PWR_EnableBkUpAccess>
	  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d6c:	2003      	movs	r0, #3
 8000d6e:	f7ff fb0f 	bl	8000390 <__NVIC_SetPriorityGrouping>
	  MX_RTC_Init();
 8000d72:	f000 fb33 	bl	80013dc <MX_RTC_Init>

	  //Ecriture du premier expe
	  expe=0;
 8000d76:	4b9f      	ldr	r3, [pc, #636]	; (8000ff4 <main+0x2a8>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	801a      	strh	r2, [r3, #0]
	  LL_RTC_DisableWriteProtection(RTC);
 8000d7c:	489e      	ldr	r0, [pc, #632]	; (8000ff8 <main+0x2ac>)
 8000d7e:	f7ff fed8 	bl	8000b32 <LL_RTC_DisableWriteProtection>
	  LL_RTC_WriteReg(RTC, BKP0R, expe);
 8000d82:	4b9c      	ldr	r3, [pc, #624]	; (8000ff4 <main+0x2a8>)
 8000d84:	881a      	ldrh	r2, [r3, #0]
 8000d86:	4b9c      	ldr	r3, [pc, #624]	; (8000ff8 <main+0x2ac>)
 8000d88:	651a      	str	r2, [r3, #80]	; 0x50
	  LL_RTC_EnableWriteProtection(RTC);
 8000d8a:	489b      	ldr	r0, [pc, #620]	; (8000ff8 <main+0x2ac>)
 8000d8c:	f7ff fec4 	bl	8000b18 <LL_RTC_EnableWriteProtection>
  }
  // Initialisation en commun

  LL_APB1_GRP1_EnableClock( LL_APB1_GRP1_PERIPH_PWR );
 8000d90:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000d94:	f7ff fd7a 	bl	800088c <LL_APB1_GRP1_EnableClock>
  LL_PWR_EnableBkUpAccess();
 8000d98:	f7ff fe6e 	bl	8000a78 <LL_PWR_EnableBkUpAccess>

  // Initialisation des peripheriques en commun
  GPIO_init();
 8000d9c:	f7ff fab2 	bl	8000304 <GPIO_init>
  MX_GPIO_Init();
 8000da0:	f000 fb70 	bl	8001484 <MX_GPIO_Init>



  expe = LL_RTC_ReadReg(RTC,BKP0R);
 8000da4:	4b94      	ldr	r3, [pc, #592]	; (8000ff8 <main+0x2ac>)
 8000da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000da8:	b29a      	uxth	r2, r3
 8000daa:	4b92      	ldr	r3, [pc, #584]	; (8000ff4 <main+0x2a8>)
 8000dac:	801a      	strh	r2, [r3, #0]

  //Detection du blue_button pendant le reset et incrémentation de expe
  if (BLUE_BUTTON()){
 8000dae:	f7ff fadd 	bl	800036c <BLUE_BUTTON>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d016      	beq.n	8000de6 <main+0x9a>
	  expe=expe+1;
 8000db8:	4b8e      	ldr	r3, [pc, #568]	; (8000ff4 <main+0x2a8>)
 8000dba:	881b      	ldrh	r3, [r3, #0]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	b29a      	uxth	r2, r3
 8000dc0:	4b8c      	ldr	r3, [pc, #560]	; (8000ff4 <main+0x2a8>)
 8000dc2:	801a      	strh	r2, [r3, #0]
	  LL_RTC_DisableWriteProtection(RTC);
 8000dc4:	488c      	ldr	r0, [pc, #560]	; (8000ff8 <main+0x2ac>)
 8000dc6:	f7ff feb4 	bl	8000b32 <LL_RTC_DisableWriteProtection>
	  LL_RTC_WriteReg(RTC, BKP0R, expe);
 8000dca:	4b8a      	ldr	r3, [pc, #552]	; (8000ff4 <main+0x2a8>)
 8000dcc:	881a      	ldrh	r2, [r3, #0]
 8000dce:	4b8a      	ldr	r3, [pc, #552]	; (8000ff8 <main+0x2ac>)
 8000dd0:	651a      	str	r2, [r3, #80]	; 0x50
	  LL_RTC_EnableWriteProtection(RTC);
 8000dd2:	4889      	ldr	r0, [pc, #548]	; (8000ff8 <main+0x2ac>)
 8000dd4:	f7ff fea0 	bl	8000b18 <LL_RTC_EnableWriteProtection>

	  if(expe==9)
 8000dd8:	4b86      	ldr	r3, [pc, #536]	; (8000ff4 <main+0x2a8>)
 8000dda:	881b      	ldrh	r3, [r3, #0]
 8000ddc:	2b09      	cmp	r3, #9
 8000dde:	d102      	bne.n	8000de6 <main+0x9a>
		  expe=1;
 8000de0:	4b84      	ldr	r3, [pc, #528]	; (8000ff4 <main+0x2a8>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	801a      	strh	r2, [r3, #0]
  }

//Initialisation des peripheriques selon l'experience
  switch(expe)
 8000de6:	4b83      	ldr	r3, [pc, #524]	; (8000ff4 <main+0x2a8>)
 8000de8:	881b      	ldrh	r3, [r3, #0]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	2b07      	cmp	r3, #7
 8000dee:	d871      	bhi.n	8000ed4 <main+0x188>
 8000df0:	a201      	add	r2, pc, #4	; (adr r2, 8000df8 <main+0xac>)
 8000df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000df6:	bf00      	nop
 8000df8:	08000e19 	.word	0x08000e19
 8000dfc:	08000e2f 	.word	0x08000e2f
 8000e00:	08000e43 	.word	0x08000e43
 8000e04:	08000e59 	.word	0x08000e59
 8000e08:	08000e6d 	.word	0x08000e6d
 8000e0c:	08000e87 	.word	0x08000e87
 8000e10:	08000ea1 	.word	0x08000ea1
 8000e14:	08000ebb 	.word	0x08000ebb
  {
  case 1:
	  /* Configure the system clock */
	  SystemClock_Config_expe1();
 8000e18:	f000 f8f4 	bl	8001004 <SystemClock_Config_expe1>
	  // init systick timer (tick period at 1 ms)
	  LL_Init1msTick(SystemCoreClock);
 8000e1c:	4b77      	ldr	r3, [pc, #476]	; (8000ffc <main+0x2b0>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4618      	mov	r0, r3
 8000e22:	f001 fc45 	bl	80026b0 <LL_Init1msTick>
	  /* System interrupt init*/
	  Systick_config (10);
 8000e26:	200a      	movs	r0, #10
 8000e28:	f000 fb7a 	bl	8001520 <Systick_config>
	  break;
 8000e2c:	e052      	b.n	8000ed4 <main+0x188>

  case 2:
  	  /* Configure the system clock */
  	  SystemClock_Config_expe2();
 8000e2e:	f000 f953 	bl	80010d8 <SystemClock_Config_expe2>
  	  // init systick timer (tick period at 1 ms)
  	  MX_TIM16_Init(); // Timer pour la calibration
 8000e32:	f000 fa4d 	bl	80012d0 <MX_TIM16_Init>
  	  LL_Init1msTick(SystemCoreClock);
 8000e36:	4b71      	ldr	r3, [pc, #452]	; (8000ffc <main+0x2b0>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f001 fc38 	bl	80026b0 <LL_Init1msTick>
  	  break;
 8000e40:	e048      	b.n	8000ed4 <main+0x188>

  case 3:
  	  // Configure the system clock
  	  SystemClock_Config_expe3();
 8000e42:	f000 f99d 	bl	8001180 <SystemClock_Config_expe3>
  	  // init systick timer (tick period at 1 ms)
  	  LL_Init1msTick(SystemCoreClock);
 8000e46:	4b6d      	ldr	r3, [pc, #436]	; (8000ffc <main+0x2b0>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f001 fc30 	bl	80026b0 <LL_Init1msTick>
  	  /* System interrupt init*/
  	  Systick_config (10);
 8000e50:	200a      	movs	r0, #10
 8000e52:	f000 fb65 	bl	8001520 <Systick_config>
  	  break;
 8000e56:	e03d      	b.n	8000ed4 <main+0x188>

  case 4:
  	  // Configure the system clock
  	  SystemClock_Config_expe3();
 8000e58:	f000 f992 	bl	8001180 <SystemClock_Config_expe3>
  	  MX_TIM16_Init();
 8000e5c:	f000 fa38 	bl	80012d0 <MX_TIM16_Init>
  	  // init systick timer (tick period at 1 ms)
  	  LL_Init1msTick(SystemCoreClock);
 8000e60:	4b66      	ldr	r3, [pc, #408]	; (8000ffc <main+0x2b0>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f001 fc23 	bl	80026b0 <LL_Init1msTick>
  	  break;
 8000e6a:	e033      	b.n	8000ed4 <main+0x188>

  	case 5:
  	  // Configure the system clock
  	  SystemClock_Config_expe5_6_7();
 8000e6c:	f000 f9dc 	bl	8001228 <SystemClock_Config_expe5_6_7>
  	  // init systick timer (tick period at 1 ms)
  	  LL_Init1msTick(SystemCoreClock);
 8000e70:	4b62      	ldr	r3, [pc, #392]	; (8000ffc <main+0x2b0>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f001 fc1b 	bl	80026b0 <LL_Init1msTick>
  	  LL_RCC_MSI_EnablePLLMode (); //Hardware auto-calibration with LSE (Attention)
 8000e7a:	f7ff fba7 	bl	80005cc <LL_RCC_MSI_EnablePLLMode>

  	  /* System interrupt init*/
  	  RTC_wakeup_init_from_stop(20);
 8000e7e:	2014      	movs	r0, #20
 8000e80:	f000 fbab 	bl	80015da <RTC_wakeup_init_from_stop>
  	  break;
 8000e84:	e026      	b.n	8000ed4 <main+0x188>

  case 6:
  	  // Configure the system clock
  	  SystemClock_Config_expe3();
 8000e86:	f000 f97b 	bl	8001180 <SystemClock_Config_expe3>
  	  // init systick timer (tick period at 1 ms)
  	  LL_Init1msTick(SystemCoreClock);
 8000e8a:	4b5c      	ldr	r3, [pc, #368]	; (8000ffc <main+0x2b0>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f001 fc0e 	bl	80026b0 <LL_Init1msTick>
  	  LL_RCC_MSI_EnablePLLMode (); //Hardware auto-calibration with LSE (Attention)
 8000e94:	f7ff fb9a 	bl	80005cc <LL_RCC_MSI_EnablePLLMode>

  	  /* System interrupt init*/
  	  RTC_wakeup_init_from_stop(20);
 8000e98:	2014      	movs	r0, #20
 8000e9a:	f000 fb9e 	bl	80015da <RTC_wakeup_init_from_stop>
  	  break;
 8000e9e:	e019      	b.n	8000ed4 <main+0x188>

  case 7:
  	  // Configure the system clock
  	  SystemClock_Config_expe3();
 8000ea0:	f000 f96e 	bl	8001180 <SystemClock_Config_expe3>
  	  // init systick timer (tick period at 1 ms)
  	  LL_Init1msTick(SystemCoreClock);
 8000ea4:	4b55      	ldr	r3, [pc, #340]	; (8000ffc <main+0x2b0>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f001 fc01 	bl	80026b0 <LL_Init1msTick>
  	  LL_RCC_MSI_EnablePLLMode (); //Hardware auto-calibration with LSE (Attention)
 8000eae:	f7ff fb8d 	bl	80005cc <LL_RCC_MSI_EnablePLLMode>
  	  /* System interrupt init*/
  	  RTC_wakeup_init_from_stop(20);
 8000eb2:	2014      	movs	r0, #20
 8000eb4:	f000 fb91 	bl	80015da <RTC_wakeup_init_from_stop>
  	  break;
 8000eb8:	e00c      	b.n	8000ed4 <main+0x188>

  case 8:
  	  // Configure the system clock
  	  SystemClock_Config_expe3();
 8000eba:	f000 f961 	bl	8001180 <SystemClock_Config_expe3>
  	  // init systick timer (tick period at 1 ms)
  	  LL_Init1msTick(SystemCoreClock);
 8000ebe:	4b4f      	ldr	r3, [pc, #316]	; (8000ffc <main+0x2b0>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f001 fbf4 	bl	80026b0 <LL_Init1msTick>
  	  LL_RCC_MSI_EnablePLLMode (); //Hardware auto-calibration with LSE (Attention)
 8000ec8:	f7ff fb80 	bl	80005cc <LL_RCC_MSI_EnablePLLMode>
  	  /* System interrupt init*/
  	  RTC_wakeup_init_from_standby_or_shutdown(20);
 8000ecc:	2014      	movs	r0, #20
 8000ece:	f000 fb77 	bl	80015c0 <RTC_wakeup_init_from_standby_or_shutdown>
  	  break;
 8000ed2:	bf00      	nop
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  if(blue_mode==1 && expe==1){
 8000ed4:	4b4a      	ldr	r3, [pc, #296]	; (8001000 <main+0x2b4>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d115      	bne.n	8000f08 <main+0x1bc>
 8000edc:	4b45      	ldr	r3, [pc, #276]	; (8000ff4 <main+0x2a8>)
 8000ede:	881b      	ldrh	r3, [r3, #0]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d111      	bne.n	8000f08 <main+0x1bc>
		  LL_PWR_EnableLowPowerRunMode();
 8000ee4:	f7ff fd8a 	bl	80009fc <LL_PWR_EnableLowPowerRunMode>
		  while(LL_PWR_IsEnabledLowPowerRunMode()==0)
 8000ee8:	bf00      	nop
 8000eea:	f7ff fd9d 	bl	8000a28 <LL_PWR_IsEnabledLowPowerRunMode>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d0fa      	beq.n	8000eea <main+0x19e>
		  {
		  }
		  LL_PWR_EnterLowPowerRunMode();
 8000ef4:	f7ff fd92 	bl	8000a1c <LL_PWR_EnterLowPowerRunMode>
		  LL_LPM_EnableSleep();
 8000ef8:	f7ff fd70 	bl	80009dc <LL_LPM_EnableSleep>
		  __WFI();
 8000efc:	bf30      	wfi
		  blue_mode=-1;
 8000efe:	4b40      	ldr	r3, [pc, #256]	; (8001000 <main+0x2b4>)
 8000f00:	f04f 32ff 	mov.w	r2, #4294967295
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	e074      	b.n	8000ff2 <main+0x2a6>
	  }
	  else if (blue_mode==1 && expe==2){
 8000f08:	4b3d      	ldr	r3, [pc, #244]	; (8001000 <main+0x2b4>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d106      	bne.n	8000f1e <main+0x1d2>
 8000f10:	4b38      	ldr	r3, [pc, #224]	; (8000ff4 <main+0x2a8>)
 8000f12:	881b      	ldrh	r3, [r3, #0]
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d102      	bne.n	8000f1e <main+0x1d2>
		  //Le LSE est deja enable
		  LL_RCC_MSI_EnablePLLMode (); //Hardware auto-calibration with LSE
 8000f18:	f7ff fb58 	bl	80005cc <LL_RCC_MSI_EnablePLLMode>
 8000f1c:	e069      	b.n	8000ff2 <main+0x2a6>
	  }
	  else if(blue_mode==1 && expe==3){
 8000f1e:	4b38      	ldr	r3, [pc, #224]	; (8001000 <main+0x2b4>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d115      	bne.n	8000f52 <main+0x206>
 8000f26:	4b33      	ldr	r3, [pc, #204]	; (8000ff4 <main+0x2a8>)
 8000f28:	881b      	ldrh	r3, [r3, #0]
 8000f2a:	2b03      	cmp	r3, #3
 8000f2c:	d111      	bne.n	8000f52 <main+0x206>
		  LL_PWR_EnableLowPowerRunMode();
 8000f2e:	f7ff fd65 	bl	80009fc <LL_PWR_EnableLowPowerRunMode>
		  while(LL_PWR_IsEnabledLowPowerRunMode()==0)
 8000f32:	bf00      	nop
 8000f34:	f7ff fd78 	bl	8000a28 <LL_PWR_IsEnabledLowPowerRunMode>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d0fa      	beq.n	8000f34 <main+0x1e8>
		  {
		  }
		  LL_PWR_EnterLowPowerRunMode();
 8000f3e:	f7ff fd6d 	bl	8000a1c <LL_PWR_EnterLowPowerRunMode>
		  LL_LPM_EnableSleep();
 8000f42:	f7ff fd4b 	bl	80009dc <LL_LPM_EnableSleep>
		  __WFI();
 8000f46:	bf30      	wfi
		  blue_mode=-1;
 8000f48:	4b2d      	ldr	r3, [pc, #180]	; (8001000 <main+0x2b4>)
 8000f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	e04f      	b.n	8000ff2 <main+0x2a6>
	  }

	  else if(blue_mode==1 && expe==4){
 8000f52:	4b2b      	ldr	r3, [pc, #172]	; (8001000 <main+0x2b4>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d106      	bne.n	8000f68 <main+0x21c>
 8000f5a:	4b26      	ldr	r3, [pc, #152]	; (8000ff4 <main+0x2a8>)
 8000f5c:	881b      	ldrh	r3, [r3, #0]
 8000f5e:	2b04      	cmp	r3, #4
 8000f60:	d102      	bne.n	8000f68 <main+0x21c>
		  LL_RCC_MSI_EnablePLLMode (); //Hardware auto-calibration with LSE
 8000f62:	f7ff fb33 	bl	80005cc <LL_RCC_MSI_EnablePLLMode>
 8000f66:	e044      	b.n	8000ff2 <main+0x2a6>
	  }

	  else if(blue_mode==1 && expe==5){
 8000f68:	4b25      	ldr	r3, [pc, #148]	; (8001000 <main+0x2b4>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d10c      	bne.n	8000f8a <main+0x23e>
 8000f70:	4b20      	ldr	r3, [pc, #128]	; (8000ff4 <main+0x2a8>)
 8000f72:	881b      	ldrh	r3, [r3, #0]
 8000f74:	2b05      	cmp	r3, #5
 8000f76:	d108      	bne.n	8000f8a <main+0x23e>
		  LL_PWR_SetPowerMode (LL_PWR_MODE_STOP0);
 8000f78:	2000      	movs	r0, #0
 8000f7a:	f7ff fd8d 	bl	8000a98 <LL_PWR_SetPowerMode>
		  __WFI();
 8000f7e:	bf30      	wfi
		  blue_mode=-1;
 8000f80:	4b1f      	ldr	r3, [pc, #124]	; (8001000 <main+0x2b4>)
 8000f82:	f04f 32ff 	mov.w	r2, #4294967295
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	e033      	b.n	8000ff2 <main+0x2a6>
	  }

	  else if(blue_mode==1 && expe==6){
 8000f8a:	4b1d      	ldr	r3, [pc, #116]	; (8001000 <main+0x2b4>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d10c      	bne.n	8000fac <main+0x260>
 8000f92:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <main+0x2a8>)
 8000f94:	881b      	ldrh	r3, [r3, #0]
 8000f96:	2b06      	cmp	r3, #6
 8000f98:	d108      	bne.n	8000fac <main+0x260>
		  LL_PWR_SetPowerMode (LL_PWR_MODE_STOP1);
 8000f9a:	2001      	movs	r0, #1
 8000f9c:	f7ff fd7c 	bl	8000a98 <LL_PWR_SetPowerMode>
		  __WFI();
 8000fa0:	bf30      	wfi
		  blue_mode=-1;
 8000fa2:	4b17      	ldr	r3, [pc, #92]	; (8001000 <main+0x2b4>)
 8000fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	e022      	b.n	8000ff2 <main+0x2a6>
	  }

	  else if(blue_mode==1 && expe==7){
 8000fac:	4b14      	ldr	r3, [pc, #80]	; (8001000 <main+0x2b4>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d10c      	bne.n	8000fce <main+0x282>
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <main+0x2a8>)
 8000fb6:	881b      	ldrh	r3, [r3, #0]
 8000fb8:	2b07      	cmp	r3, #7
 8000fba:	d108      	bne.n	8000fce <main+0x282>
		  LL_PWR_SetPowerMode (LL_PWR_MODE_STOP2);
 8000fbc:	2002      	movs	r0, #2
 8000fbe:	f7ff fd6b 	bl	8000a98 <LL_PWR_SetPowerMode>
		  __WFI();
 8000fc2:	bf30      	wfi
		  blue_mode=-1;
 8000fc4:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <main+0x2b4>)
 8000fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	e011      	b.n	8000ff2 <main+0x2a6>
	  }

	  else if(blue_mode==1 && expe==8){
 8000fce:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <main+0x2b4>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	f47f af7e 	bne.w	8000ed4 <main+0x188>
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <main+0x2a8>)
 8000fda:	881b      	ldrh	r3, [r3, #0]
 8000fdc:	2b08      	cmp	r3, #8
 8000fde:	f47f af79 	bne.w	8000ed4 <main+0x188>
		  LL_PWR_SetPowerMode (LL_PWR_MODE_SHUTDOWN);
 8000fe2:	2004      	movs	r0, #4
 8000fe4:	f7ff fd58 	bl	8000a98 <LL_PWR_SetPowerMode>
		  __WFI();
 8000fe8:	bf30      	wfi
		  blue_mode=-1;
 8000fea:	4b05      	ldr	r3, [pc, #20]	; (8001000 <main+0x2b4>)
 8000fec:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff0:	601a      	str	r2, [r3, #0]
	  if(blue_mode==1 && expe==1){
 8000ff2:	e76f      	b.n	8000ed4 <main+0x188>
 8000ff4:	20000028 	.word	0x20000028
 8000ff8:	40002800 	.word	0x40002800
 8000ffc:	20000000 	.word	0x20000000
 8001000:	20000020 	.word	0x20000020

08001004 <SystemClock_Config_expe1>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config_expe1(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
	/* MSI configuration and activation */
    LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 8001008:	2004      	movs	r0, #4
 800100a:	f7ff fc6f 	bl	80008ec <LL_FLASH_SetLatency>
    while (LL_FLASH_GetLatency()!=LL_FLASH_LATENCY_4)
 800100e:	bf00      	nop
 8001010:	f7ff fc80 	bl	8000914 <LL_FLASH_GetLatency>
 8001014:	4603      	mov	r3, r0
 8001016:	2b04      	cmp	r3, #4
 8001018:	d1fa      	bne.n	8001010 <SystemClock_Config_expe1+0xc>
    {
    }
    LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800101a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800101e:	f7ff fd17 	bl	8000a50 <LL_PWR_SetRegulVoltageScaling>
	LL_RCC_MSI_Enable();
 8001022:	f7ff fab1 	bl	8000588 <LL_RCC_MSI_Enable>

	// Wait till LSI is ready
	while (LL_RCC_MSI_IsReady() != 1)
 8001026:	bf00      	nop
 8001028:	f7ff fabe 	bl	80005a8 <LL_RCC_MSI_IsReady>
 800102c:	4603      	mov	r3, r0
 800102e:	2b01      	cmp	r3, #1
 8001030:	d1fa      	bne.n	8001028 <SystemClock_Config_expe1+0x24>
	{ }

	LL_RCC_MSI_EnablePLLMode();
 8001032:	f7ff facb 	bl	80005cc <LL_RCC_MSI_EnablePLLMode>
	LL_RCC_MSI_EnableRangeSelection();
 8001036:	f7ff fad9 	bl	80005ec <LL_RCC_MSI_EnableRangeSelection>
	LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_6);
 800103a:	2060      	movs	r0, #96	; 0x60
 800103c:	f7ff fae6 	bl	800060c <LL_RCC_MSI_SetRange>
	LL_RCC_MSI_SetCalibTrimming(0);
 8001040:	2000      	movs	r0, #0
 8001042:	f7ff faf7 	bl	8000634 <LL_RCC_MSI_SetCalibTrimming>
	LL_APB1_GRP1_EnableClock (LL_APB1_GRP1_PERIPH_PWR);
 8001046:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800104a:	f7ff fc1f 	bl	800088c <LL_APB1_GRP1_EnableClock>
	LL_PWR_EnableBkUpAccess();
 800104e:	f7ff fd13 	bl	8000a78 <LL_PWR_EnableBkUpAccess>
	LL_RCC_ForceBackupDomainReset();
 8001052:	f7ff fb8b 	bl	800076c <LL_RCC_ForceBackupDomainReset>
	LL_RCC_ReleaseBackupDomainReset();
 8001056:	f7ff fb9b 	bl	8000790 <LL_RCC_ReleaseBackupDomainReset>
	LL_RCC_LSE_EnableBypass();
 800105a:	f7ff fa59 	bl	8000510 <LL_RCC_LSE_EnableBypass>
	LL_RCC_LSE_Enable();
 800105e:	f7ff fa45 	bl	80004ec <LL_RCC_LSE_Enable>

	// Wait intil LSE is ready
	while(LL_RCC_LSE_IsReady() != 1 )
 8001062:	bf00      	nop
 8001064:	f7ff fa7c 	bl	8000560 <LL_RCC_LSE_IsReady>
 8001068:	4603      	mov	r3, r0
 800106a:	2b01      	cmp	r3, #1
 800106c:	d1fa      	bne.n	8001064 <SystemClock_Config_expe1+0x60>
	{
	}
	LL_RCC_SetRTCClockSource(LL_RCC_RTC_CLKSOURCE_LSE);
 800106e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001072:	f7ff fb53 	bl	800071c <LL_RCC_SetRTCClockSource>
	LL_RCC_EnableRTC();
 8001076:	f7ff fb67 	bl	8000748 <LL_RCC_EnableRTC>

	/* Main PLL configuration and activation */
	LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_MSI, LL_RCC_PLLM_DIV_1, 40, LL_RCC_PLLR_DIV_2);
 800107a:	2300      	movs	r3, #0
 800107c:	2228      	movs	r2, #40	; 0x28
 800107e:	2100      	movs	r1, #0
 8001080:	2001      	movs	r0, #1
 8001082:	f7ff fbbb 	bl	80007fc <LL_RCC_PLL_ConfigDomain_SYS>
	LL_RCC_PLL_EnableDomain_SYS();
 8001086:	f7ff fbd9 	bl	800083c <LL_RCC_PLL_EnableDomain_SYS>
	LL_RCC_PLL_Enable();
 800108a:	f7ff fb93 	bl	80007b4 <LL_RCC_PLL_Enable>
	while(LL_RCC_PLL_IsReady() != 1)
 800108e:	bf00      	nop
 8001090:	f7ff fba0 	bl	80007d4 <LL_RCC_PLL_IsReady>
 8001094:	4603      	mov	r3, r0
 8001096:	2b01      	cmp	r3, #1
 8001098:	d1fa      	bne.n	8001090 <SystemClock_Config_expe1+0x8c>
	{ }

	/* Sysclk activation on the main PLL */
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800109a:	2000      	movs	r0, #0
 800109c:	f7ff fb02 	bl	80006a4 <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80010a0:	2003      	movs	r0, #3
 80010a2:	f7ff fadd 	bl	8000660 <LL_RCC_SetSysClkSource>
	while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80010a6:	bf00      	nop
 80010a8:	f7ff faee 	bl	8000688 <LL_RCC_GetSysClkSource>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b0c      	cmp	r3, #12
 80010b0:	d1fa      	bne.n	80010a8 <SystemClock_Config_expe1+0xa4>
	{
	}

	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80010b2:	2000      	movs	r0, #0
 80010b4:	f7ff faf6 	bl	80006a4 <LL_RCC_SetAHBPrescaler>
	/* Set APB1 & APB2 prescaler*/
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80010b8:	2000      	movs	r0, #0
 80010ba:	f7ff fb07 	bl	80006cc <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80010be:	2000      	movs	r0, #0
 80010c0:	f7ff fb18 	bl	80006f4 <LL_RCC_SetAPB2Prescaler>

	// Pour l'interruption

	LL_Init1msTick(80000000);
 80010c4:	4803      	ldr	r0, [pc, #12]	; (80010d4 <SystemClock_Config_expe1+0xd0>)
 80010c6:	f001 faf3 	bl	80026b0 <LL_Init1msTick>
	/* Update the global variable called SystemCoreClock */
	LL_SetSystemCoreClock(80000000);
 80010ca:	4802      	ldr	r0, [pc, #8]	; (80010d4 <SystemClock_Config_expe1+0xd0>)
 80010cc:	f001 fafe 	bl	80026cc <LL_SetSystemCoreClock>
	//SystemCoreClockUpdate(); // A voir
}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	04c4b400 	.word	0x04c4b400

080010d8 <SystemClock_Config_expe2>:

void SystemClock_Config_expe2(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
	//Configuration du clock system sur MSI
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 80010dc:	2001      	movs	r0, #1
 80010de:	f7ff fc05 	bl	80008ec <LL_FLASH_SetLatency>
	while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_1)
 80010e2:	bf00      	nop
 80010e4:	f7ff fc16 	bl	8000914 <LL_FLASH_GetLatency>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d1fa      	bne.n	80010e4 <SystemClock_Config_expe2+0xc>
	{
	}
	LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80010ee:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010f2:	f7ff fcad 	bl	8000a50 <LL_PWR_SetRegulVoltageScaling>
	LL_RCC_MSI_Enable();
 80010f6:	f7ff fa47 	bl	8000588 <LL_RCC_MSI_Enable>

	/* Wait till MSI is ready */
	while(LL_RCC_MSI_IsReady() != 1)
 80010fa:	bf00      	nop
 80010fc:	f7ff fa54 	bl	80005a8 <LL_RCC_MSI_IsReady>
 8001100:	4603      	mov	r3, r0
 8001102:	2b01      	cmp	r3, #1
 8001104:	d1fa      	bne.n	80010fc <SystemClock_Config_expe2+0x24>
	{

	}
	LL_RCC_MSI_EnablePLLMode();
 8001106:	f7ff fa61 	bl	80005cc <LL_RCC_MSI_EnablePLLMode>
	LL_RCC_MSI_EnableRangeSelection();
 800110a:	f7ff fa6f 	bl	80005ec <LL_RCC_MSI_EnableRangeSelection>
	LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_9);
 800110e:	2090      	movs	r0, #144	; 0x90
 8001110:	f7ff fa7c 	bl	800060c <LL_RCC_MSI_SetRange>
	LL_RCC_MSI_SetCalibTrimming(0);
 8001114:	2000      	movs	r0, #0
 8001116:	f7ff fa8d 	bl	8000634 <LL_RCC_MSI_SetCalibTrimming>
	LL_APB1_GRP1_EnableClock (LL_APB1_GRP1_PERIPH_PWR); ///necessaire?
 800111a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800111e:	f7ff fbb5 	bl	800088c <LL_APB1_GRP1_EnableClock>
	LL_PWR_EnableBkUpAccess();
 8001122:	f7ff fca9 	bl	8000a78 <LL_PWR_EnableBkUpAccess>
	LL_RCC_ForceBackupDomainReset();  ///necessaire?
 8001126:	f7ff fb21 	bl	800076c <LL_RCC_ForceBackupDomainReset>
		LL_RCC_ReleaseBackupDomainReset();  ///necessaire?
 800112a:	f7ff fb31 	bl	8000790 <LL_RCC_ReleaseBackupDomainReset>
	LL_RCC_LSE_SetDriveCapability(LL_RCC_LSEDRIVE_LOW);
 800112e:	2000      	movs	r0, #0
 8001130:	f7ff fa00 	bl	8000534 <LL_RCC_LSE_SetDriveCapability>
	LL_RCC_LSE_Enable();
 8001134:	f7ff f9da 	bl	80004ec <LL_RCC_LSE_Enable>

	/* Wait till LSE is ready */
	while(LL_RCC_LSE_IsReady() != 1)
 8001138:	bf00      	nop
 800113a:	f7ff fa11 	bl	8000560 <LL_RCC_LSE_IsReady>
 800113e:	4603      	mov	r3, r0
 8001140:	2b01      	cmp	r3, #1
 8001142:	d1fa      	bne.n	800113a <SystemClock_Config_expe2+0x62>
	{

	}
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_MSI);
 8001144:	2000      	movs	r0, #0
 8001146:	f7ff fa8b 	bl	8000660 <LL_RCC_SetSysClkSource>

	/* Wait till System clock is ready */
	while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_MSI)
 800114a:	bf00      	nop
 800114c:	f7ff fa9c 	bl	8000688 <LL_RCC_GetSysClkSource>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d1fa      	bne.n	800114c <SystemClock_Config_expe2+0x74>
	{

	}
	LL_RCC_EnableRTC(); //necessaire?
 8001156:	f7ff faf7 	bl	8000748 <LL_RCC_EnableRTC>
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800115a:	2000      	movs	r0, #0
 800115c:	f7ff faa2 	bl	80006a4 <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001160:	2000      	movs	r0, #0
 8001162:	f7ff fab3 	bl	80006cc <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001166:	2000      	movs	r0, #0
 8001168:	f7ff fac4 	bl	80006f4 <LL_RCC_SetAPB2Prescaler>

	LL_Init1msTick(24000000);
 800116c:	4803      	ldr	r0, [pc, #12]	; (800117c <SystemClock_Config_expe2+0xa4>)
 800116e:	f001 fa9f 	bl	80026b0 <LL_Init1msTick>

	LL_SetSystemCoreClock(24000000);
 8001172:	4802      	ldr	r0, [pc, #8]	; (800117c <SystemClock_Config_expe2+0xa4>)
 8001174:	f001 faaa 	bl	80026cc <LL_SetSystemCoreClock>
}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}
 800117c:	016e3600 	.word	0x016e3600

08001180 <SystemClock_Config_expe3>:

void SystemClock_Config_expe3(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
	//Configuration du clock system sur MSI
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 8001184:	2003      	movs	r0, #3
 8001186:	f7ff fbb1 	bl	80008ec <LL_FLASH_SetLatency>
	while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3)
 800118a:	bf00      	nop
 800118c:	f7ff fbc2 	bl	8000914 <LL_FLASH_GetLatency>
 8001190:	4603      	mov	r3, r0
 8001192:	2b03      	cmp	r3, #3
 8001194:	d1fa      	bne.n	800118c <SystemClock_Config_expe3+0xc>
	{
	}
	LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE2);
 8001196:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800119a:	f7ff fc59 	bl	8000a50 <LL_PWR_SetRegulVoltageScaling>
	LL_RCC_MSI_Enable();
 800119e:	f7ff f9f3 	bl	8000588 <LL_RCC_MSI_Enable>

	/* Wait till MSI is ready */
	while(LL_RCC_MSI_IsReady() != 1)
 80011a2:	bf00      	nop
 80011a4:	f7ff fa00 	bl	80005a8 <LL_RCC_MSI_IsReady>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d1fa      	bne.n	80011a4 <SystemClock_Config_expe3+0x24>
	{

	}
	LL_RCC_MSI_EnablePLLMode();
 80011ae:	f7ff fa0d 	bl	80005cc <LL_RCC_MSI_EnablePLLMode>
	LL_RCC_MSI_EnableRangeSelection();
 80011b2:	f7ff fa1b 	bl	80005ec <LL_RCC_MSI_EnableRangeSelection>
	LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_9);
 80011b6:	2090      	movs	r0, #144	; 0x90
 80011b8:	f7ff fa28 	bl	800060c <LL_RCC_MSI_SetRange>
	LL_RCC_MSI_SetCalibTrimming(0);
 80011bc:	2000      	movs	r0, #0
 80011be:	f7ff fa39 	bl	8000634 <LL_RCC_MSI_SetCalibTrimming>
	LL_APB1_GRP1_EnableClock (LL_APB1_GRP1_PERIPH_PWR); ///necessaire?
 80011c2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80011c6:	f7ff fb61 	bl	800088c <LL_APB1_GRP1_EnableClock>
	LL_PWR_EnableBkUpAccess();
 80011ca:	f7ff fc55 	bl	8000a78 <LL_PWR_EnableBkUpAccess>
	LL_RCC_ForceBackupDomainReset();  ///necessaire?
 80011ce:	f7ff facd 	bl	800076c <LL_RCC_ForceBackupDomainReset>
		LL_RCC_ReleaseBackupDomainReset();  ///necessaire?
 80011d2:	f7ff fadd 	bl	8000790 <LL_RCC_ReleaseBackupDomainReset>
	LL_RCC_LSE_SetDriveCapability(LL_RCC_LSEDRIVE_LOW);
 80011d6:	2000      	movs	r0, #0
 80011d8:	f7ff f9ac 	bl	8000534 <LL_RCC_LSE_SetDriveCapability>
	LL_RCC_LSE_Enable();
 80011dc:	f7ff f986 	bl	80004ec <LL_RCC_LSE_Enable>

	/* Wait till LSE is ready */
	while(LL_RCC_LSE_IsReady() != 1)
 80011e0:	bf00      	nop
 80011e2:	f7ff f9bd 	bl	8000560 <LL_RCC_LSE_IsReady>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d1fa      	bne.n	80011e2 <SystemClock_Config_expe3+0x62>
	{

	}
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_MSI);
 80011ec:	2000      	movs	r0, #0
 80011ee:	f7ff fa37 	bl	8000660 <LL_RCC_SetSysClkSource>

	/* Wait till System clock is ready */
	while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_MSI)
 80011f2:	bf00      	nop
 80011f4:	f7ff fa48 	bl	8000688 <LL_RCC_GetSysClkSource>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d1fa      	bne.n	80011f4 <SystemClock_Config_expe3+0x74>
	{

	}
	LL_RCC_EnableRTC(); //necessaire?
 80011fe:	f7ff faa3 	bl	8000748 <LL_RCC_EnableRTC>
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001202:	2000      	movs	r0, #0
 8001204:	f7ff fa4e 	bl	80006a4 <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001208:	2000      	movs	r0, #0
 800120a:	f7ff fa5f 	bl	80006cc <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800120e:	2000      	movs	r0, #0
 8001210:	f7ff fa70 	bl	80006f4 <LL_RCC_SetAPB2Prescaler>

	LL_Init1msTick(24000000);
 8001214:	4803      	ldr	r0, [pc, #12]	; (8001224 <SystemClock_Config_expe3+0xa4>)
 8001216:	f001 fa4b 	bl	80026b0 <LL_Init1msTick>

	LL_SetSystemCoreClock(24000000);
 800121a:	4802      	ldr	r0, [pc, #8]	; (8001224 <SystemClock_Config_expe3+0xa4>)
 800121c:	f001 fa56 	bl	80026cc <LL_SetSystemCoreClock>
}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}
 8001224:	016e3600 	.word	0x016e3600

08001228 <SystemClock_Config_expe5_6_7>:

void SystemClock_Config_expe5_6_7(void){
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
	//Configuration du clock system sur MSI
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 800122c:	2003      	movs	r0, #3
 800122e:	f7ff fb5d 	bl	80008ec <LL_FLASH_SetLatency>
	while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3)
 8001232:	bf00      	nop
 8001234:	f7ff fb6e 	bl	8000914 <LL_FLASH_GetLatency>
 8001238:	4603      	mov	r3, r0
 800123a:	2b03      	cmp	r3, #3
 800123c:	d1fa      	bne.n	8001234 <SystemClock_Config_expe5_6_7+0xc>
	{
	}
	LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE2);
 800123e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001242:	f7ff fc05 	bl	8000a50 <LL_PWR_SetRegulVoltageScaling>
	LL_RCC_MSI_Enable();
 8001246:	f7ff f99f 	bl	8000588 <LL_RCC_MSI_Enable>

	/* Wait till MSI is ready */
	while(LL_RCC_MSI_IsReady() != 1)
 800124a:	bf00      	nop
 800124c:	f7ff f9ac 	bl	80005a8 <LL_RCC_MSI_IsReady>
 8001250:	4603      	mov	r3, r0
 8001252:	2b01      	cmp	r3, #1
 8001254:	d1fa      	bne.n	800124c <SystemClock_Config_expe5_6_7+0x24>
	{

	}
	LL_RCC_MSI_EnablePLLMode();
 8001256:	f7ff f9b9 	bl	80005cc <LL_RCC_MSI_EnablePLLMode>
	LL_RCC_MSI_EnableRangeSelection();
 800125a:	f7ff f9c7 	bl	80005ec <LL_RCC_MSI_EnableRangeSelection>
	LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_9);
 800125e:	2090      	movs	r0, #144	; 0x90
 8001260:	f7ff f9d4 	bl	800060c <LL_RCC_MSI_SetRange>
	LL_RCC_MSI_SetCalibTrimming(0);
 8001264:	2000      	movs	r0, #0
 8001266:	f7ff f9e5 	bl	8000634 <LL_RCC_MSI_SetCalibTrimming>
	LL_APB1_GRP1_EnableClock (LL_APB1_GRP1_PERIPH_PWR); ///necessaire?
 800126a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800126e:	f7ff fb0d 	bl	800088c <LL_APB1_GRP1_EnableClock>
	LL_PWR_EnableBkUpAccess();
 8001272:	f7ff fc01 	bl	8000a78 <LL_PWR_EnableBkUpAccess>
	LL_RCC_ForceBackupDomainReset();  ///necessaire?
 8001276:	f7ff fa79 	bl	800076c <LL_RCC_ForceBackupDomainReset>
		LL_RCC_ReleaseBackupDomainReset();  ///necessaire?
 800127a:	f7ff fa89 	bl	8000790 <LL_RCC_ReleaseBackupDomainReset>
	LL_RCC_LSE_SetDriveCapability(LL_RCC_LSEDRIVE_LOW);
 800127e:	2000      	movs	r0, #0
 8001280:	f7ff f958 	bl	8000534 <LL_RCC_LSE_SetDriveCapability>
	LL_RCC_LSE_Enable();
 8001284:	f7ff f932 	bl	80004ec <LL_RCC_LSE_Enable>

	/* Wait till LSE is ready */
	while(LL_RCC_LSE_IsReady() != 1)
 8001288:	bf00      	nop
 800128a:	f7ff f969 	bl	8000560 <LL_RCC_LSE_IsReady>
 800128e:	4603      	mov	r3, r0
 8001290:	2b01      	cmp	r3, #1
 8001292:	d1fa      	bne.n	800128a <SystemClock_Config_expe5_6_7+0x62>
	{

	}
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_MSI);
 8001294:	2000      	movs	r0, #0
 8001296:	f7ff f9e3 	bl	8000660 <LL_RCC_SetSysClkSource>

	/* Wait till System clock is ready */
	while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_MSI)
 800129a:	bf00      	nop
 800129c:	f7ff f9f4 	bl	8000688 <LL_RCC_GetSysClkSource>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d1fa      	bne.n	800129c <SystemClock_Config_expe5_6_7+0x74>
	{

	}
	LL_RCC_EnableRTC(); //necessaire?
 80012a6:	f7ff fa4f 	bl	8000748 <LL_RCC_EnableRTC>
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80012aa:	2000      	movs	r0, #0
 80012ac:	f7ff f9fa 	bl	80006a4 <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80012b0:	2000      	movs	r0, #0
 80012b2:	f7ff fa0b 	bl	80006cc <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80012b6:	2000      	movs	r0, #0
 80012b8:	f7ff fa1c 	bl	80006f4 <LL_RCC_SetAPB2Prescaler>

	LL_Init1msTick(24000000);
 80012bc:	4803      	ldr	r0, [pc, #12]	; (80012cc <SystemClock_Config_expe5_6_7+0xa4>)
 80012be:	f001 f9f7 	bl	80026b0 <LL_Init1msTick>

	LL_SetSystemCoreClock(24000000);
 80012c2:	4802      	ldr	r0, [pc, #8]	; (80012cc <SystemClock_Config_expe5_6_7+0xa4>)
 80012c4:	f001 fa02 	bl	80026cc <LL_SetSystemCoreClock>
}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	016e3600 	.word	0x016e3600

080012d0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function Pour la calibration MSI&LSE
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b09e      	sub	sp, #120	; 0x78
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80012d6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	60da      	str	r2, [r3, #12]
 80012e4:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80012e6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80012ea:	2220      	movs	r2, #32
 80012ec:	2100      	movs	r1, #0
 80012ee:	4618      	mov	r0, r3
 80012f0:	f001 fa20 	bl	8002734 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 80012f4:	f107 031c 	add.w	r3, r7, #28
 80012f8:	2228      	movs	r2, #40	; 0x28
 80012fa:	2100      	movs	r1, #0
 80012fc:	4618      	mov	r0, r3
 80012fe:	f001 fa19 	bl	8002734 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]
 8001310:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM16);
 8001312:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001316:	f7ff fad1 	bl	80008bc <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001320:	2300      	movs	r3, #0
 8001322:	66bb      	str	r3, [r7, #104]	; 0x68
  TIM_InitStruct.Autoreload = 65535;
 8001324:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001328:	66fb      	str	r3, [r7, #108]	; 0x6c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800132a:	2300      	movs	r3, #0
 800132c:	673b      	str	r3, [r7, #112]	; 0x70
  TIM_InitStruct.RepetitionCounter = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	677b      	str	r3, [r7, #116]	; 0x74
  LL_TIM_Init(TIM16, &TIM_InitStruct);
 8001332:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001336:	4619      	mov	r1, r3
 8001338:	4827      	ldr	r0, [pc, #156]	; (80013d8 <MX_TIM16_Init+0x108>)
 800133a:	f000 fd87 	bl	8001e4c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM16);
 800133e:	4826      	ldr	r0, [pc, #152]	; (80013d8 <MX_TIM16_Init+0x108>)
 8001340:	f7ff fca2 	bl	8000c88 <LL_TIM_DisableARRPreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8001344:	2300      	movs	r3, #0
 8001346:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001348:	2300      	movs	r3, #0
 800134a:	64bb      	str	r3, [r7, #72]	; 0x48
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800134c:	2300      	movs	r3, #0
 800134e:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.CompareValue = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	653b      	str	r3, [r7, #80]	; 0x50
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001354:	2300      	movs	r3, #0
 8001356:	657b      	str	r3, [r7, #84]	; 0x54
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001358:	2300      	movs	r3, #0
 800135a:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 800135c:	2300      	movs	r3, #0
 800135e:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8001360:	2300      	movs	r3, #0
 8001362:	663b      	str	r3, [r7, #96]	; 0x60
  LL_TIM_OC_Init(TIM16, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001364:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001368:	461a      	mov	r2, r3
 800136a:	2101      	movs	r1, #1
 800136c:	481a      	ldr	r0, [pc, #104]	; (80013d8 <MX_TIM16_Init+0x108>)
 800136e:	f000 fe01 	bl	8001f74 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM16, LL_TIM_CHANNEL_CH1);
 8001372:	2101      	movs	r1, #1
 8001374:	4818      	ldr	r0, [pc, #96]	; (80013d8 <MX_TIM16_Init+0x108>)
 8001376:	f7ff fc97 	bl	8000ca8 <LL_TIM_OC_DisableFast>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 800137e:	2300      	movs	r3, #0
 8001380:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8001382:	2300      	movs	r3, #0
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 800138c:	2300      	movs	r3, #0
 800138e:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8001390:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001394:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8001396:	2300      	movs	r3, #0
 8001398:	643b      	str	r3, [r7, #64]	; 0x40
  LL_TIM_BDTR_Init(TIM16, &TIM_BDTRInitStruct);
 800139a:	f107 031c 	add.w	r3, r7, #28
 800139e:	4619      	mov	r1, r3
 80013a0:	480d      	ldr	r0, [pc, #52]	; (80013d8 <MX_TIM16_Init+0x108>)
 80013a2:	f000 fe35 	bl	8002010 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80013a6:	2001      	movs	r0, #1
 80013a8:	f7ff fa58 	bl	800085c <LL_AHB2_GRP1_EnableClock>
  /**TIM16 GPIO Configuration
  PA6   ------> TIM16_CH1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 80013ac:	2340      	movs	r3, #64	; 0x40
 80013ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80013b0:	2302      	movs	r3, #2
 80013b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80013b4:	2300      	movs	r3, #0
 80013b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_14;
 80013c0:	230e      	movs	r3, #14
 80013c2:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	4619      	mov	r1, r3
 80013c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013cc:	f000 fb3a 	bl	8001a44 <LL_GPIO_Init>

}
 80013d0:	bf00      	nop
 80013d2:	3778      	adds	r7, #120	; 0x78
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40014400 	.word	0x40014400

080013dc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  LL_RTC_InitTypeDef RTC_InitStruct = {0};
 80013e2:	1d3b      	adds	r3, r7, #4
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]

  //Verification que le module LSE est desactive i.e demarrage a froid
  if(LL_RCC_LSE_IsReady()==0){
 80013ec:	f7ff f8b8 	bl	8000560 <LL_RCC_LSE_IsReady>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d10b      	bne.n	800140e <MX_RTC_Init+0x32>
	  LL_RCC_ForceBackupDomainReset();
 80013f6:	f7ff f9b9 	bl	800076c <LL_RCC_ForceBackupDomainReset>
	  LL_RCC_ReleaseBackupDomainReset();
 80013fa:	f7ff f9c9 	bl	8000790 <LL_RCC_ReleaseBackupDomainReset>
	  LL_RCC_LSE_Enable();
 80013fe:	f7ff f875 	bl	80004ec <LL_RCC_LSE_Enable>
	  while(LL_RCC_LSE_IsReady()!=1)
 8001402:	bf00      	nop
 8001404:	f7ff f8ac 	bl	8000560 <LL_RCC_LSE_IsReady>
 8001408:	4603      	mov	r3, r0
 800140a:	2b01      	cmp	r3, #1
 800140c:	d1fa      	bne.n	8001404 <MX_RTC_Init+0x28>
	  {}
  }
  LL_RCC_SetRTCClockSource(LL_RCC_RTC_CLKSOURCE_LSE);
 800140e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001412:	f7ff f983 	bl	800071c <LL_RCC_SetRTCClockSource>
  /* Peripheral clock enable */
  LL_RCC_EnableRTC();
 8001416:	f7ff f997 	bl	8000748 <LL_RCC_EnableRTC>

  /* RTC interrupt Init */ // A voir apres
  NVIC_SetPriority(RTC_WKUP_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800141a:	f7fe ffdd 	bl	80003d8 <__NVIC_GetPriorityGrouping>
 800141e:	4603      	mov	r3, r0
 8001420:	2200      	movs	r2, #0
 8001422:	2100      	movs	r1, #0
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff f82d 	bl	8000484 <NVIC_EncodePriority>
 800142a:	4603      	mov	r3, r0
 800142c:	4619      	mov	r1, r3
 800142e:	2003      	movs	r0, #3
 8001430:	f7fe fffe 	bl	8000430 <__NVIC_SetPriority>
  NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001434:	2003      	movs	r0, #3
 8001436:	f7fe ffdd 	bl	80003f4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN RTC_Init 1 */
  LL_RTC_DisableWriteProtection(RTC);
 800143a:	4811      	ldr	r0, [pc, #68]	; (8001480 <MX_RTC_Init+0xa4>)
 800143c:	f7ff fb79 	bl	8000b32 <LL_RTC_DisableWriteProtection>
  LL_RTC_EnableInitMode(RTC);
 8001440:	480f      	ldr	r0, [pc, #60]	; (8001480 <MX_RTC_Init+0xa4>)
 8001442:	f7ff fb4d 	bl	8000ae0 <LL_RTC_EnableInitMode>
  while(LL_RTC_IsActiveFlag_INIT(RTC)==0)
 8001446:	bf00      	nop
 8001448:	480d      	ldr	r0, [pc, #52]	; (8001480 <MX_RTC_Init+0xa4>)
 800144a:	f7ff fbd9 	bl	8000c00 <LL_RTC_IsActiveFlag_INIT>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d0f9      	beq.n	8001448 <MX_RTC_Init+0x6c>
  {}
  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC and set the Time and Date
  */
  RTC_InitStruct.HourFormat = LL_RTC_HOURFORMAT_24HOUR;
 8001454:	2300      	movs	r3, #0
 8001456:	607b      	str	r3, [r7, #4]
  RTC_InitStruct.AsynchPrescaler = 127;
 8001458:	237f      	movs	r3, #127	; 0x7f
 800145a:	60bb      	str	r3, [r7, #8]
  RTC_InitStruct.SynchPrescaler = 255;
 800145c:	23ff      	movs	r3, #255	; 0xff
 800145e:	60fb      	str	r3, [r7, #12]
  LL_RTC_Init(RTC, &RTC_InitStruct);
 8001460:	1d3b      	adds	r3, r7, #4
 8001462:	4619      	mov	r1, r3
 8001464:	4806      	ldr	r0, [pc, #24]	; (8001480 <MX_RTC_Init+0xa4>)
 8001466:	f000 fbff 	bl	8001c68 <LL_RTC_Init>
  /** Initialize RTC and set the Time and Date
  */
  /* USER CODE BEGIN RTC_Init 2 */
  LL_RTC_DisableInitMode(RTC);
 800146a:	4805      	ldr	r0, [pc, #20]	; (8001480 <MX_RTC_Init+0xa4>)
 800146c:	f7ff fb46 	bl	8000afc <LL_RTC_DisableInitMode>
  LL_RTC_EnableWriteProtection(RTC);
 8001470:	4803      	ldr	r0, [pc, #12]	; (8001480 <MX_RTC_Init+0xa4>)
 8001472:	f7ff fb51 	bl	8000b18 <LL_RTC_EnableWriteProtection>
  /* USER CODE END RTC_Init 2 */
}
 8001476:	bf00      	nop
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40002800 	.word	0x40002800

08001484 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148a:	463b      	mov	r3, r7
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
 8001498:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 800149a:	2004      	movs	r0, #4
 800149c:	f7ff f9de 	bl	800085c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80014a0:	2001      	movs	r0, #1
 80014a2:	f7ff f9db 	bl	800085c <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);
 80014a6:	2120      	movs	r1, #32
 80014a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ac:	f7ff fbde 	bl	8000c6c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_10);
 80014b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014b4:	4819      	ldr	r0, [pc, #100]	; (800151c <MX_GPIO_Init+0x98>)
 80014b6:	f7ff fbd9 	bl	8000c6c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 80014ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014be:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80014c0:	2300      	movs	r3, #0
 80014c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014c4:	2300      	movs	r3, #0
 80014c6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c8:	463b      	mov	r3, r7
 80014ca:	4619      	mov	r1, r3
 80014cc:	4813      	ldr	r0, [pc, #76]	; (800151c <MX_GPIO_Init+0x98>)
 80014ce:	f000 fab9 	bl	8001a44 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 80014d2:	2320      	movs	r3, #32
 80014d4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80014d6:	2301      	movs	r3, #1
 80014d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80014da:	2300      	movs	r3, #0
 80014dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e6:	463b      	mov	r3, r7
 80014e8:	4619      	mov	r1, r3
 80014ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ee:	f000 faa9 	bl	8001a44 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80014f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014f6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80014f8:	2301      	movs	r3, #1
 80014fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80014fc:	2300      	movs	r3, #0
 80014fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001504:	2300      	movs	r3, #0
 8001506:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001508:	463b      	mov	r3, r7
 800150a:	4619      	mov	r1, r3
 800150c:	4803      	ldr	r0, [pc, #12]	; (800151c <MX_GPIO_Init+0x98>)
 800150e:	f000 fa99 	bl	8001a44 <LL_GPIO_Init>

}
 8001512:	bf00      	nop
 8001514:	3718      	adds	r7, #24
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	48000800 	.word	0x48000800

08001520 <Systick_config>:
  * @brief GPIO Initialization Function
  * @param ticks in ms
  * @retval None
  */
void Systick_config (int ticks)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
	SysTick->VAL = 0;
 8001528:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <Systick_config+0x44>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
    SysTick->LOAD =ticks-1;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	1e5a      	subs	r2, r3, #1
 8001532:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <Systick_config+0x44>)
 8001534:	605a      	str	r2, [r3, #4]
    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk;
 8001536:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <Systick_config+0x44>)
 8001538:	2204      	movs	r2, #4
 800153a:	601a      	str	r2, [r3, #0]
    NVIC_SetPriority( SysTick_IRQn, 7 );
 800153c:	2107      	movs	r1, #7
 800153e:	f04f 30ff 	mov.w	r0, #4294967295
 8001542:	f7fe ff75 	bl	8000430 <__NVIC_SetPriority>
    LL_SYSTICK_EnableIT();
 8001546:	f7ff fa27 	bl	8000998 <LL_SYSTICK_EnableIT>
    while(!LL_SYSTICK_IsEnabledIT())
 800154a:	bf00      	nop
 800154c:	f7ff fa34 	bl	80009b8 <LL_SYSTICK_IsEnabledIT>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d0fa      	beq.n	800154c <Systick_config+0x2c>
      {}
    SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
 8001556:	4b03      	ldr	r3, [pc, #12]	; (8001564 <Systick_config+0x44>)
 8001558:	2201      	movs	r2, #1
 800155a:	601a      	str	r2, [r3, #0]
}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	e000e010 	.word	0xe000e010

08001568 <RTC_wakeup_init>:
  * @param delay in ms
  * @retval None
  */
// partie commune a toutes les utilisations du wakeup timer
static void RTC_wakeup_init( int delay )
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
	LL_RTC_DisableWriteProtection(RTC);
 8001570:	4812      	ldr	r0, [pc, #72]	; (80015bc <RTC_wakeup_init+0x54>)
 8001572:	f7ff fade 	bl	8000b32 <LL_RTC_DisableWriteProtection>
	LL_RTC_WAKEUP_Disable(RTC);
 8001576:	4811      	ldr	r0, [pc, #68]	; (80015bc <RTC_wakeup_init+0x54>)
 8001578:	f7ff fafb 	bl	8000b72 <LL_RTC_WAKEUP_Disable>
	while	( !LL_RTC_IsActiveFlag_WUTW(RTC))
 800157c:	bf00      	nop
 800157e:	480f      	ldr	r0, [pc, #60]	; (80015bc <RTC_wakeup_init+0x54>)
 8001580:	f7ff fb51 	bl	8000c26 <LL_RTC_IsActiveFlag_WUTW>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d0f9      	beq.n	800157e <RTC_wakeup_init+0x16>
		{ }
	// connecter le timer a l'horloge 1Hz de la RTC
	LL_RTC_WAKEUP_SetClock(RTC, LL_RTC_WAKEUPCLOCK_CKSPRE);
 800158a:	2104      	movs	r1, #4
 800158c:	480b      	ldr	r0, [pc, #44]	; (80015bc <RTC_wakeup_init+0x54>)
 800158e:	f7ff fb00 	bl	8000b92 <LL_RTC_WAKEUP_SetClock>
	// fixer la duree de temporisation
	LL_RTC_WAKEUP_SetAutoReload(RTC, delay);	// 16 bits
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4619      	mov	r1, r3
 8001596:	4809      	ldr	r0, [pc, #36]	; (80015bc <RTC_wakeup_init+0x54>)
 8001598:	f7ff fb0e 	bl	8000bb8 <LL_RTC_WAKEUP_SetAutoReload>
	LL_RTC_ClearFlag_WUT(RTC);
 800159c:	4807      	ldr	r0, [pc, #28]	; (80015bc <RTC_wakeup_init+0x54>)
 800159e:	f7ff fb1e 	bl	8000bde <LL_RTC_ClearFlag_WUT>
	LL_RTC_EnableIT_WUT(RTC);
 80015a2:	4806      	ldr	r0, [pc, #24]	; (80015bc <RTC_wakeup_init+0x54>)
 80015a4:	f7ff fb52 	bl	8000c4c <LL_RTC_EnableIT_WUT>
	LL_RTC_WAKEUP_Enable(RTC);
 80015a8:	4804      	ldr	r0, [pc, #16]	; (80015bc <RTC_wakeup_init+0x54>)
 80015aa:	f7ff fad2 	bl	8000b52 <LL_RTC_WAKEUP_Enable>
	LL_RTC_EnableWriteProtection(RTC);
 80015ae:	4803      	ldr	r0, [pc, #12]	; (80015bc <RTC_wakeup_init+0x54>)
 80015b0:	f7ff fab2 	bl	8000b18 <LL_RTC_EnableWriteProtection>
}
 80015b4:	bf00      	nop
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40002800 	.word	0x40002800

080015c0 <RTC_wakeup_init_from_standby_or_shutdown>:

// Dans le cas des modes STANDBY et SHUTDOWN, le MPU sera reveille par reset
// causé par 1 wakeup line (interne ou externe) (le NVIC n'est plus alimenté)
void RTC_wakeup_init_from_standby_or_shutdown( int delay )
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
	RTC_wakeup_init( delay );
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f7ff ffcd 	bl	8001568 <RTC_wakeup_init>
	// enable the Internal Wake-up line
	LL_PWR_EnableInternWU();	// ceci ne concerne que Standby et Shutdown, pas STOPx
 80015ce:	f7ff fa77 	bl	8000ac0 <LL_PWR_EnableInternWU>
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <RTC_wakeup_init_from_stop>:
// le module EXTI et une partie du NVIC sont encore alimentes
// le contenu de la RAM et des registres étant préservé, le MPU
// reprend l'execution après l'instruction WFI

void RTC_wakeup_init_from_stop( int delay )
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b082      	sub	sp, #8
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
	RTC_wakeup_init( delay );
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f7ff ffc0 	bl	8001568 <RTC_wakeup_init>
	// valider l'interrupt par la ligne 20 du module EXTI, qui est réservée au wakeup timer
	LL_EXTI_EnableIT_0_31( LL_EXTI_LINE_20 );
 80015e8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80015ec:	f7ff f9a0 	bl	8000930 <LL_EXTI_EnableIT_0_31>
	LL_EXTI_EnableRisingTrig_0_31( LL_EXTI_LINE_20 );
 80015f0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80015f4:	f7ff f9ae 	bl	8000954 <LL_EXTI_EnableRisingTrig_0_31>
	// valider l'interrupt chez NVIC
	NVIC_SetPriority( RTC_WKUP_IRQn, 1 );
 80015f8:	2101      	movs	r1, #1
 80015fa:	2003      	movs	r0, #3
 80015fc:	f7fe ff18 	bl	8000430 <__NVIC_SetPriority>
	NVIC_EnableIRQ( RTC_WKUP_IRQn );
 8001600:	2003      	movs	r0, #3
 8001602:	f7fe fef7 	bl	80003f4 <__NVIC_EnableIRQ>
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <RTC_WKUP_IRQHandler>:

// wakeup timer interrupt Handler (inutile mais doit etre defini)
void RTC_WKUP_IRQHandler()
{
 800160e:	b580      	push	{r7, lr}
 8001610:	af00      	add	r7, sp, #0
	LL_EXTI_ClearFlag_0_31( LL_EXTI_LINE_20 );
 8001612:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001616:	f7ff f9af 	bl	8000978 <LL_EXTI_ClearFlag_0_31>
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
	...

08001620 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if (counter_systick<5*expe)
 8001624:	4b1b      	ldr	r3, [pc, #108]	; (8001694 <SysTick_Handler+0x74>)
 8001626:	881b      	ldrh	r3, [r3, #0]
 8001628:	461a      	mov	r2, r3
 800162a:	4613      	mov	r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	4413      	add	r3, r2
 8001630:	461a      	mov	r2, r3
 8001632:	4b19      	ldr	r3, [pc, #100]	; (8001698 <SysTick_Handler+0x78>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	429a      	cmp	r2, r3
 8001638:	d902      	bls.n	8001640 <SysTick_Handler+0x20>
		LED_GREEN(1);
 800163a:	2001      	movs	r0, #1
 800163c:	f7fe fe80 	bl	8000340 <LED_GREEN>
	if (counter_systick>5*expe)
 8001640:	4b14      	ldr	r3, [pc, #80]	; (8001694 <SysTick_Handler+0x74>)
 8001642:	881b      	ldrh	r3, [r3, #0]
 8001644:	461a      	mov	r2, r3
 8001646:	4613      	mov	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	461a      	mov	r2, r3
 800164e:	4b12      	ldr	r3, [pc, #72]	; (8001698 <SysTick_Handler+0x78>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	429a      	cmp	r2, r3
 8001654:	d202      	bcs.n	800165c <SysTick_Handler+0x3c>
		LED_GREEN(0);
 8001656:	2000      	movs	r0, #0
 8001658:	f7fe fe72 	bl	8000340 <LED_GREEN>
	if (counter_systick==200)
 800165c:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <SysTick_Handler+0x78>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2bc8      	cmp	r3, #200	; 0xc8
 8001662:	d102      	bne.n	800166a <SysTick_Handler+0x4a>
		counter_systick=0;
 8001664:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <SysTick_Handler+0x78>)
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]

	counter_systick++;
 800166a:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <SysTick_Handler+0x78>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	3301      	adds	r3, #1
 8001670:	4a09      	ldr	r2, [pc, #36]	; (8001698 <SysTick_Handler+0x78>)
 8001672:	6013      	str	r3, [r2, #0]

	if (BLUE_BUTTON() ){
 8001674:	f7fe fe7a 	bl	800036c <BLUE_BUTTON>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d007      	beq.n	800168e <SysTick_Handler+0x6e>
		LED_GREEN(1);
 800167e:	2001      	movs	r0, #1
 8001680:	f7fe fe5e 	bl	8000340 <LED_GREEN>
		blue_mode++;
 8001684:	4b05      	ldr	r3, [pc, #20]	; (800169c <SysTick_Handler+0x7c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	3301      	adds	r3, #1
 800168a:	4a04      	ldr	r2, [pc, #16]	; (800169c <SysTick_Handler+0x7c>)
 800168c:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000028 	.word	0x20000028
 8001698:	20000024 	.word	0x20000024
 800169c:	20000020 	.word	0x20000020

080016a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016b2:	e7fe      	b.n	80016b2 <HardFault_Handler+0x4>

080016b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <MemManage_Handler+0x4>

080016ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016be:	e7fe      	b.n	80016be <BusFault_Handler+0x4>

080016c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c4:	e7fe      	b.n	80016c4 <UsageFault_Handler+0x4>

080016c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016f4:	4b17      	ldr	r3, [pc, #92]	; (8001754 <SystemInit+0x64>)
 80016f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016fa:	4a16      	ldr	r2, [pc, #88]	; (8001754 <SystemInit+0x64>)
 80016fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001700:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001704:	4b14      	ldr	r3, [pc, #80]	; (8001758 <SystemInit+0x68>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a13      	ldr	r2, [pc, #76]	; (8001758 <SystemInit+0x68>)
 800170a:	f043 0301 	orr.w	r3, r3, #1
 800170e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001710:	4b11      	ldr	r3, [pc, #68]	; (8001758 <SystemInit+0x68>)
 8001712:	2200      	movs	r2, #0
 8001714:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001716:	4b10      	ldr	r3, [pc, #64]	; (8001758 <SystemInit+0x68>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a0f      	ldr	r2, [pc, #60]	; (8001758 <SystemInit+0x68>)
 800171c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001720:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001724:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001726:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <SystemInit+0x68>)
 8001728:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800172c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800172e:	4b0a      	ldr	r3, [pc, #40]	; (8001758 <SystemInit+0x68>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a09      	ldr	r2, [pc, #36]	; (8001758 <SystemInit+0x68>)
 8001734:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001738:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800173a:	4b07      	ldr	r3, [pc, #28]	; (8001758 <SystemInit+0x68>)
 800173c:	2200      	movs	r2, #0
 800173e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001740:	4b04      	ldr	r3, [pc, #16]	; (8001754 <SystemInit+0x64>)
 8001742:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001746:	609a      	str	r2, [r3, #8]
#endif
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	e000ed00 	.word	0xe000ed00
 8001758:	40021000 	.word	0x40021000

0800175c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800175c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001794 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001760:	f7ff ffc6 	bl	80016f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001764:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001766:	e003      	b.n	8001770 <LoopCopyDataInit>

08001768 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001768:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800176a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800176c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800176e:	3104      	adds	r1, #4

08001770 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001770:	480a      	ldr	r0, [pc, #40]	; (800179c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001772:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001774:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001776:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001778:	d3f6      	bcc.n	8001768 <CopyDataInit>
	ldr	r2, =_sbss
 800177a:	4a0a      	ldr	r2, [pc, #40]	; (80017a4 <LoopForever+0x12>)
	b	LoopFillZerobss
 800177c:	e002      	b.n	8001784 <LoopFillZerobss>

0800177e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800177e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001780:	f842 3b04 	str.w	r3, [r2], #4

08001784 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001784:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <LoopForever+0x16>)
	cmp	r2, r3
 8001786:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001788:	d3f9      	bcc.n	800177e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800178a:	f000 ffaf 	bl	80026ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800178e:	f7ff fadd 	bl	8000d4c <main>

08001792 <LoopForever>:

LoopForever:
    b LoopForever
 8001792:	e7fe      	b.n	8001792 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001794:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001798:	0800277c 	.word	0x0800277c
	ldr	r0, =_sdata
 800179c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80017a0:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 80017a4:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 80017a8:	20000030 	.word	0x20000030

080017ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017ac:	e7fe      	b.n	80017ac <ADC1_2_IRQHandler>

080017ae <LL_GPIO_SetPinMode>:
{
 80017ae:	b480      	push	{r7}
 80017b0:	b08b      	sub	sp, #44	; 0x2c
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	60f8      	str	r0, [r7, #12]
 80017b6:	60b9      	str	r1, [r7, #8]
 80017b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	fa93 f3a3 	rbit	r3, r3
 80017c8:	613b      	str	r3, [r7, #16]
  return result;
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d101      	bne.n	80017d8 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80017d4:	2320      	movs	r3, #32
 80017d6:	e003      	b.n	80017e0 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	fab3 f383 	clz	r3, r3
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	2103      	movs	r1, #3
 80017e4:	fa01 f303 	lsl.w	r3, r1, r3
 80017e8:	43db      	mvns	r3, r3
 80017ea:	401a      	ands	r2, r3
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f0:	6a3b      	ldr	r3, [r7, #32]
 80017f2:	fa93 f3a3 	rbit	r3, r3
 80017f6:	61fb      	str	r3, [r7, #28]
  return result;
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80017fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8001802:	2320      	movs	r3, #32
 8001804:	e003      	b.n	800180e <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	fab3 f383 	clz	r3, r3
 800180c:	b2db      	uxtb	r3, r3
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	6879      	ldr	r1, [r7, #4]
 8001812:	fa01 f303 	lsl.w	r3, r1, r3
 8001816:	431a      	orrs	r2, r3
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	601a      	str	r2, [r3, #0]
}
 800181c:	bf00      	nop
 800181e:	372c      	adds	r7, #44	; 0x2c
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <LL_GPIO_SetPinOutputType>:
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	685a      	ldr	r2, [r3, #4]
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	43db      	mvns	r3, r3
 800183c:	401a      	ands	r2, r3
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	6879      	ldr	r1, [r7, #4]
 8001842:	fb01 f303 	mul.w	r3, r1, r3
 8001846:	431a      	orrs	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	605a      	str	r2, [r3, #4]
}
 800184c:	bf00      	nop
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <LL_GPIO_SetPinSpeed>:
{
 8001858:	b480      	push	{r7}
 800185a:	b08b      	sub	sp, #44	; 0x2c
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	689a      	ldr	r2, [r3, #8]
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	fa93 f3a3 	rbit	r3, r3
 8001872:	613b      	str	r3, [r7, #16]
  return result;
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d101      	bne.n	8001882 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800187e:	2320      	movs	r3, #32
 8001880:	e003      	b.n	800188a <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	fab3 f383 	clz	r3, r3
 8001888:	b2db      	uxtb	r3, r3
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	2103      	movs	r1, #3
 800188e:	fa01 f303 	lsl.w	r3, r1, r3
 8001892:	43db      	mvns	r3, r3
 8001894:	401a      	ands	r2, r3
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189a:	6a3b      	ldr	r3, [r7, #32]
 800189c:	fa93 f3a3 	rbit	r3, r3
 80018a0:	61fb      	str	r3, [r7, #28]
  return result;
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80018a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d101      	bne.n	80018b0 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80018ac:	2320      	movs	r3, #32
 80018ae:	e003      	b.n	80018b8 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80018b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b2:	fab3 f383 	clz	r3, r3
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	fa01 f303 	lsl.w	r3, r1, r3
 80018c0:	431a      	orrs	r2, r3
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	609a      	str	r2, [r3, #8]
}
 80018c6:	bf00      	nop
 80018c8:	372c      	adds	r7, #44	; 0x2c
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <LL_GPIO_SetPinPull>:
{
 80018d2:	b480      	push	{r7}
 80018d4:	b08b      	sub	sp, #44	; 0x2c
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	60f8      	str	r0, [r7, #12]
 80018da:	60b9      	str	r1, [r7, #8]
 80018dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	68da      	ldr	r2, [r3, #12]
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	fa93 f3a3 	rbit	r3, r3
 80018ec:	613b      	str	r3, [r7, #16]
  return result;
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d101      	bne.n	80018fc <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80018f8:	2320      	movs	r3, #32
 80018fa:	e003      	b.n	8001904 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	fab3 f383 	clz	r3, r3
 8001902:	b2db      	uxtb	r3, r3
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	2103      	movs	r1, #3
 8001908:	fa01 f303 	lsl.w	r3, r1, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	401a      	ands	r2, r3
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001914:	6a3b      	ldr	r3, [r7, #32]
 8001916:	fa93 f3a3 	rbit	r3, r3
 800191a:	61fb      	str	r3, [r7, #28]
  return result;
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8001926:	2320      	movs	r3, #32
 8001928:	e003      	b.n	8001932 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192c:	fab3 f383 	clz	r3, r3
 8001930:	b2db      	uxtb	r3, r3
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	6879      	ldr	r1, [r7, #4]
 8001936:	fa01 f303 	lsl.w	r3, r1, r3
 800193a:	431a      	orrs	r2, r3
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	60da      	str	r2, [r3, #12]
}
 8001940:	bf00      	nop
 8001942:	372c      	adds	r7, #44	; 0x2c
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <LL_GPIO_SetAFPin_0_7>:
{
 800194c:	b480      	push	{r7}
 800194e:	b08b      	sub	sp, #44	; 0x2c
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6a1a      	ldr	r2, [r3, #32]
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	fa93 f3a3 	rbit	r3, r3
 8001966:	613b      	str	r3, [r7, #16]
  return result;
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d101      	bne.n	8001976 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8001972:	2320      	movs	r3, #32
 8001974:	e003      	b.n	800197e <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	fab3 f383 	clz	r3, r3
 800197c:	b2db      	uxtb	r3, r3
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	210f      	movs	r1, #15
 8001982:	fa01 f303 	lsl.w	r3, r1, r3
 8001986:	43db      	mvns	r3, r3
 8001988:	401a      	ands	r2, r3
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198e:	6a3b      	ldr	r3, [r7, #32]
 8001990:	fa93 f3a3 	rbit	r3, r3
 8001994:	61fb      	str	r3, [r7, #28]
  return result;
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	2b00      	cmp	r3, #0
 800199e:	d101      	bne.n	80019a4 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80019a0:	2320      	movs	r3, #32
 80019a2:	e003      	b.n	80019ac <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80019a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a6:	fab3 f383 	clz	r3, r3
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	6879      	ldr	r1, [r7, #4]
 80019b0:	fa01 f303 	lsl.w	r3, r1, r3
 80019b4:	431a      	orrs	r2, r3
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	621a      	str	r2, [r3, #32]
}
 80019ba:	bf00      	nop
 80019bc:	372c      	adds	r7, #44	; 0x2c
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <LL_GPIO_SetAFPin_8_15>:
{
 80019c6:	b480      	push	{r7}
 80019c8:	b08b      	sub	sp, #44	; 0x2c
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	60f8      	str	r0, [r7, #12]
 80019ce:	60b9      	str	r1, [r7, #8]
 80019d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	0a1b      	lsrs	r3, r3, #8
 80019da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	fa93 f3a3 	rbit	r3, r3
 80019e2:	613b      	str	r3, [r7, #16]
  return result;
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80019ee:	2320      	movs	r3, #32
 80019f0:	e003      	b.n	80019fa <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	fab3 f383 	clz	r3, r3
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	210f      	movs	r1, #15
 80019fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001a02:	43db      	mvns	r3, r3
 8001a04:	401a      	ands	r2, r3
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	0a1b      	lsrs	r3, r3, #8
 8001a0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0c:	6a3b      	ldr	r3, [r7, #32]
 8001a0e:	fa93 f3a3 	rbit	r3, r3
 8001a12:	61fb      	str	r3, [r7, #28]
  return result;
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8001a1e:	2320      	movs	r3, #32
 8001a20:	e003      	b.n	8001a2a <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8001a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a24:	fab3 f383 	clz	r3, r3
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	6879      	ldr	r1, [r7, #4]
 8001a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a32:	431a      	orrs	r2, r3
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001a38:	bf00      	nop
 8001a3a:	372c      	adds	r7, #44	; 0x2c
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b088      	sub	sp, #32
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	fa93 f3a3 	rbit	r3, r3
 8001a5a:	60fb      	str	r3, [r7, #12]
  return result;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <LL_GPIO_Init+0x26>
    return 32U;
 8001a66:	2320      	movs	r3, #32
 8001a68:	e003      	b.n	8001a72 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	fab3 f383 	clz	r3, r3
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001a74:	e040      	b.n	8001af8 <LL_GPIO_Init+0xb4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a82:	4013      	ands	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d032      	beq.n	8001af2 <LL_GPIO_Init+0xae>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	461a      	mov	r2, r3
 8001a92:	69b9      	ldr	r1, [r7, #24]
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f7ff fe8a 	bl	80017ae <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d003      	beq.n	8001aaa <LL_GPIO_Init+0x66>
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d106      	bne.n	8001ab8 <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	461a      	mov	r2, r3
 8001ab0:	69b9      	ldr	r1, [r7, #24]
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7ff fed0 	bl	8001858 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	691b      	ldr	r3, [r3, #16]
 8001abc:	461a      	mov	r2, r3
 8001abe:	69b9      	ldr	r1, [r7, #24]
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f7ff ff06 	bl	80018d2 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d111      	bne.n	8001af2 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	2bff      	cmp	r3, #255	; 0xff
 8001ad2:	d807      	bhi.n	8001ae4 <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	695b      	ldr	r3, [r3, #20]
 8001ad8:	461a      	mov	r2, r3
 8001ada:	69b9      	ldr	r1, [r7, #24]
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f7ff ff35 	bl	800194c <LL_GPIO_SetAFPin_0_7>
 8001ae2:	e006      	b.n	8001af2 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	695b      	ldr	r3, [r3, #20]
 8001ae8:	461a      	mov	r2, r3
 8001aea:	69b9      	ldr	r1, [r7, #24]
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f7ff ff6a 	bl	80019c6 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	3301      	adds	r3, #1
 8001af6:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	fa22 f303 	lsr.w	r3, r2, r3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1b7      	bne.n	8001a76 <LL_GPIO_Init+0x32>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d003      	beq.n	8001b16 <LL_GPIO_Init+0xd2>
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d107      	bne.n	8001b26 <LL_GPIO_Init+0xe2>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	6819      	ldr	r1, [r3, #0]
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f7ff fe81 	bl	8001828 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3720      	adds	r7, #32
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <LL_RTC_SetHourFormat>:
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_FMT, HourFormat);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	431a      	orrs	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	609a      	str	r2, [r3, #8]
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <LL_RTC_EnableInitMode>:
{
 8001b56:	b480      	push	{r7}
 8001b58:	b083      	sub	sp, #12
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, RTC_LL_INIT_MASK);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f04f 32ff 	mov.w	r2, #4294967295
 8001b64:	60da      	str	r2, [r3, #12]
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <LL_RTC_DisableInitMode>:
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001b80:	60da      	str	r2, [r3, #12]
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <LL_RTC_SetAsynchPrescaler>:
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
 8001b96:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	041b      	lsls	r3, r3, #16
 8001ba4:	431a      	orrs	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	611a      	str	r2, [r3, #16]
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <LL_RTC_SetSynchPrescaler>:
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
 8001bbe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001bc8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	431a      	orrs	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	611a      	str	r2, [r3, #16]
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <LL_RTC_EnableWriteProtection>:
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	22ff      	movs	r2, #255	; 0xff
 8001bec:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <LL_RTC_DisableWriteProtection>:
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	22ca      	movs	r2, #202	; 0xca
 8001c06:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2253      	movs	r2, #83	; 0x53
 8001c0c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <LL_RTC_IsActiveFlag_INIT>:
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c2a:	2b40      	cmp	r3, #64	; 0x40
 8001c2c:	bf0c      	ite	eq
 8001c2e:	2301      	moveq	r3, #1
 8001c30:	2300      	movne	r3, #0
 8001c32:	b2db      	uxtb	r3, r3
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <LL_SYSTICK_IsActiveCounterFlag>:
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8001c44:	4b07      	ldr	r3, [pc, #28]	; (8001c64 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c50:	bf0c      	ite	eq
 8001c52:	2301      	moveq	r3, #1
 8001c54:	2300      	movne	r3, #0
 8001c56:	b2db      	uxtb	r3, r3
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	e000e010 	.word	0xe000e010

08001c68 <LL_RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized
  */
ErrorStatus LL_RTC_Init(RTC_TypeDef *RTCx, LL_RTC_InitTypeDef *RTC_InitStruct)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_RTC_HOURFORMAT(RTC_InitStruct->HourFormat));
  assert_param(IS_LL_RTC_ASYNCH_PREDIV(RTC_InitStruct->AsynchPrescaler));
  assert_param(IS_LL_RTC_SYNCH_PREDIV(RTC_InitStruct->SynchPrescaler));

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7ff ffbf 	bl	8001bfa <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f000 f822 	bl	8001cc6 <LL_RTC_EnterInitMode>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d016      	beq.n	8001cb6 <LL_RTC_Init+0x4e>
  {
    /* Set Hour Format */
    LL_RTC_SetHourFormat(RTCx, RTC_InitStruct->HourFormat);
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff ff4e 	bl	8001b30 <LL_RTC_SetHourFormat>

    /* Configure Synchronous and Asynchronous prescaler factor */
    LL_RTC_SetSynchPrescaler(RTCx, RTC_InitStruct->SynchPrescaler);
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	4619      	mov	r1, r3
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7ff ff8b 	bl	8001bb6 <LL_RTC_SetSynchPrescaler>
    LL_RTC_SetAsynchPrescaler(RTCx, RTC_InitStruct->AsynchPrescaler);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f7ff ff71 	bl	8001b8e <LL_RTC_SetAsynchPrescaler>

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTCx);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f7ff ff60 	bl	8001b72 <LL_RTC_DisableInitMode>

    status = SUCCESS;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	73fb      	strb	r3, [r7, #15]
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7ff ff92 	bl	8001be0 <LL_RTC_EnableWriteProtection>

  return status;
 8001cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <LL_RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b086      	sub	sp, #24
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 8001cce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cd2:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	75fb      	strb	r3, [r7, #23]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Check if the Initialization mode is set */
  if (LL_RTC_IsActiveFlag_INIT(RTCx) == 0U)
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f7ff ff9e 	bl	8001c1a <LL_RTC_IsActiveFlag_INIT>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d11e      	bne.n	8001d22 <LL_RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    LL_RTC_EnableInitMode(RTCx);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f7ff ff36 	bl	8001b56 <LL_RTC_EnableInitMode>

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff ff95 	bl	8001c1a <LL_RTC_IsActiveFlag_INIT>
 8001cf0:	6138      	str	r0, [r7, #16]
    while ((timeout != 0U) && (tmp != 1U))
 8001cf2:	e010      	b.n	8001d16 <LL_RTC_EnterInitMode+0x50>
    {
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8001cf4:	f7ff ffa4 	bl	8001c40 <LL_SYSTICK_IsActiveCounterFlag>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d102      	bne.n	8001d04 <LL_RTC_EnterInitMode+0x3e>
      {
        timeout --;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	3b01      	subs	r3, #1
 8001d02:	60fb      	str	r3, [r7, #12]
      }
      tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f7ff ff88 	bl	8001c1a <LL_RTC_IsActiveFlag_INIT>
 8001d0a:	6138      	str	r0, [r7, #16]
      if (timeout == 0U)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <LL_RTC_EnterInitMode+0x50>
      {
        status = ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	75fb      	strb	r3, [r7, #23]
    while ((timeout != 0U) && (tmp != 1U))
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d002      	beq.n	8001d22 <LL_RTC_EnterInitMode+0x5c>
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d1e8      	bne.n	8001cf4 <LL_RTC_EnterInitMode+0x2e>
      }
    }
  }
  return status;
 8001d22:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3718      	adds	r7, #24
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <LL_TIM_SetPrescaler>:
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	683a      	ldr	r2, [r7, #0]
 8001d3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <LL_TIM_SetAutoReload>:
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	683a      	ldr	r2, [r7, #0]
 8001d56:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <LL_TIM_SetRepetitionCounter>:
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	683a      	ldr	r2, [r7, #0]
 8001d8e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <LL_TIM_OC_SetCompareCH5>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH5(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <LL_TIM_OC_SetCompareCH6>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH6(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	695b      	ldr	r3, [r3, #20]
 8001e38:	f043 0201 	orr.w	r2, r3, #1
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	615a      	str	r2, [r3, #20]
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a3d      	ldr	r2, [pc, #244]	; (8001f54 <LL_TIM_Init+0x108>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d013      	beq.n	8001e8c <LL_TIM_Init+0x40>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e6a:	d00f      	beq.n	8001e8c <LL_TIM_Init+0x40>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a3a      	ldr	r2, [pc, #232]	; (8001f58 <LL_TIM_Init+0x10c>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d00b      	beq.n	8001e8c <LL_TIM_Init+0x40>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a39      	ldr	r2, [pc, #228]	; (8001f5c <LL_TIM_Init+0x110>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d007      	beq.n	8001e8c <LL_TIM_Init+0x40>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a38      	ldr	r2, [pc, #224]	; (8001f60 <LL_TIM_Init+0x114>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d003      	beq.n	8001e8c <LL_TIM_Init+0x40>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a37      	ldr	r2, [pc, #220]	; (8001f64 <LL_TIM_Init+0x118>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d106      	bne.n	8001e9a <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a2d      	ldr	r2, [pc, #180]	; (8001f54 <LL_TIM_Init+0x108>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d01f      	beq.n	8001ee2 <LL_TIM_Init+0x96>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ea8:	d01b      	beq.n	8001ee2 <LL_TIM_Init+0x96>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a2a      	ldr	r2, [pc, #168]	; (8001f58 <LL_TIM_Init+0x10c>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d017      	beq.n	8001ee2 <LL_TIM_Init+0x96>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a29      	ldr	r2, [pc, #164]	; (8001f5c <LL_TIM_Init+0x110>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d013      	beq.n	8001ee2 <LL_TIM_Init+0x96>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a28      	ldr	r2, [pc, #160]	; (8001f60 <LL_TIM_Init+0x114>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d00f      	beq.n	8001ee2 <LL_TIM_Init+0x96>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a27      	ldr	r2, [pc, #156]	; (8001f64 <LL_TIM_Init+0x118>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d00b      	beq.n	8001ee2 <LL_TIM_Init+0x96>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a26      	ldr	r2, [pc, #152]	; (8001f68 <LL_TIM_Init+0x11c>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d007      	beq.n	8001ee2 <LL_TIM_Init+0x96>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a25      	ldr	r2, [pc, #148]	; (8001f6c <LL_TIM_Init+0x120>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d003      	beq.n	8001ee2 <LL_TIM_Init+0x96>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a24      	ldr	r2, [pc, #144]	; (8001f70 <LL_TIM_Init+0x124>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d106      	bne.n	8001ef0 <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	4619      	mov	r1, r3
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f7ff ff23 	bl	8001d48 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	881b      	ldrh	r3, [r3, #0]
 8001f06:	4619      	mov	r1, r3
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f7ff ff0f 	bl	8001d2c <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a10      	ldr	r2, [pc, #64]	; (8001f54 <LL_TIM_Init+0x108>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d00f      	beq.n	8001f36 <LL_TIM_Init+0xea>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a12      	ldr	r2, [pc, #72]	; (8001f64 <LL_TIM_Init+0x118>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d00b      	beq.n	8001f36 <LL_TIM_Init+0xea>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a11      	ldr	r2, [pc, #68]	; (8001f68 <LL_TIM_Init+0x11c>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d007      	beq.n	8001f36 <LL_TIM_Init+0xea>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a10      	ldr	r2, [pc, #64]	; (8001f6c <LL_TIM_Init+0x120>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d003      	beq.n	8001f36 <LL_TIM_Init+0xea>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a0f      	ldr	r2, [pc, #60]	; (8001f70 <LL_TIM_Init+0x124>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d105      	bne.n	8001f42 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f7ff ff11 	bl	8001d64 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7ff ff72 	bl	8001e2c <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40012c00 	.word	0x40012c00
 8001f58:	40000400 	.word	0x40000400
 8001f5c:	40000800 	.word	0x40000800
 8001f60:	40000c00 	.word	0x40000c00
 8001f64:	40013400 	.word	0x40013400
 8001f68:	40014000 	.word	0x40014000
 8001f6c:	40014400 	.word	0x40014400
 8001f70:	40014800 	.word	0x40014800

08001f74 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f8a:	d01f      	beq.n	8001fcc <LL_TIM_OC_Init+0x58>
 8001f8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f90:	d804      	bhi.n	8001f9c <LL_TIM_OC_Init+0x28>
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d00c      	beq.n	8001fb0 <LL_TIM_OC_Init+0x3c>
 8001f96:	2b10      	cmp	r3, #16
 8001f98:	d011      	beq.n	8001fbe <LL_TIM_OC_Init+0x4a>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8001f9a:	e033      	b.n	8002004 <LL_TIM_OC_Init+0x90>
  switch (Channel)
 8001f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fa0:	d022      	beq.n	8001fe8 <LL_TIM_OC_Init+0x74>
 8001fa2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001fa6:	d026      	beq.n	8001ff6 <LL_TIM_OC_Init+0x82>
 8001fa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fac:	d015      	beq.n	8001fda <LL_TIM_OC_Init+0x66>
      break;
 8001fae:	e029      	b.n	8002004 <LL_TIM_OC_Init+0x90>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8001fb0:	6879      	ldr	r1, [r7, #4]
 8001fb2:	68f8      	ldr	r0, [r7, #12]
 8001fb4:	f000 f8a6 	bl	8002104 <OC1Config>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	75fb      	strb	r3, [r7, #23]
      break;
 8001fbc:	e022      	b.n	8002004 <LL_TIM_OC_Init+0x90>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	68f8      	ldr	r0, [r7, #12]
 8001fc2:	f000 f91f 	bl	8002204 <OC2Config>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	75fb      	strb	r3, [r7, #23]
      break;
 8001fca:	e01b      	b.n	8002004 <LL_TIM_OC_Init+0x90>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8001fcc:	6879      	ldr	r1, [r7, #4]
 8001fce:	68f8      	ldr	r0, [r7, #12]
 8001fd0:	f000 f99c 	bl	800230c <OC3Config>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	75fb      	strb	r3, [r7, #23]
      break;
 8001fd8:	e014      	b.n	8002004 <LL_TIM_OC_Init+0x90>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8001fda:	6879      	ldr	r1, [r7, #4]
 8001fdc:	68f8      	ldr	r0, [r7, #12]
 8001fde:	f000 fa19 	bl	8002414 <OC4Config>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	75fb      	strb	r3, [r7, #23]
      break;
 8001fe6:	e00d      	b.n	8002004 <LL_TIM_OC_Init+0x90>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8001fe8:	6879      	ldr	r1, [r7, #4]
 8001fea:	68f8      	ldr	r0, [r7, #12]
 8001fec:	f000 fa7e 	bl	80024ec <OC5Config>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	75fb      	strb	r3, [r7, #23]
      break;
 8001ff4:	e006      	b.n	8002004 <LL_TIM_OC_Init+0x90>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8001ff6:	6879      	ldr	r1, [r7, #4]
 8001ff8:	68f8      	ldr	r0, [r7, #12]
 8001ffa:	f000 fadb 	bl	80025b4 <OC6Config>
 8001ffe:	4603      	mov	r3, r0
 8002000:	75fb      	strb	r3, [r7, #23]
      break;
 8002002:	bf00      	nop
  }

  return result;
 8002004:	7dfb      	ldrb	r3, [r7, #23]
}
 8002006:	4618      	mov	r0, r3
 8002008:	3718      	adds	r7, #24
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
	...

08002010 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 800201a:	2300      	movs	r3, #0
 800201c:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	7b12      	ldrb	r2, [r2, #12]
 8002028:	4313      	orrs	r3, r2
 800202a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	4313      	orrs	r3, r2
 8002038:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	4313      	orrs	r3, r2
 8002046:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4313      	orrs	r3, r2
 8002054:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	89d2      	ldrh	r2, [r2, #14]
 8002060:	4313      	orrs	r3, r2
 8002062:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	4313      	orrs	r3, r2
 8002070:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207c:	4313      	orrs	r3, r2
 800207e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208a:	4313      	orrs	r3, r2
 800208c:	60fb      	str	r3, [r7, #12]
  if (IS_TIM_ADVANCED_INSTANCE(TIMx))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a1a      	ldr	r2, [pc, #104]	; (80020fc <LL_TIM_BDTR_Init+0xec>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d003      	beq.n	800209e <LL_TIM_BDTR_Init+0x8e>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a19      	ldr	r2, [pc, #100]	; (8002100 <LL_TIM_BDTR_Init+0xf0>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d106      	bne.n	80020ac <LL_TIM_BDTR_Init+0x9c>
  {
    assert_param(IS_LL_TIM_BREAK_FILTER(TIM_BDTRInitStruct->BreakFilter));
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, TIM_BDTRInitStruct->BreakFilter);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	695b      	ldr	r3, [r3, #20]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(TIMx))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a13      	ldr	r2, [pc, #76]	; (80020fc <LL_TIM_BDTR_Init+0xec>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d003      	beq.n	80020bc <LL_TIM_BDTR_Init+0xac>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a12      	ldr	r2, [pc, #72]	; (8002100 <LL_TIM_BDTR_Init+0xf0>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d114      	bne.n	80020e6 <LL_TIM_BDTR_Init+0xd6>
    assert_param(IS_LL_TIM_BREAK2_STATE(TIM_BDTRInitStruct->Break2State));
    assert_param(IS_LL_TIM_BREAK2_POLARITY(TIM_BDTRInitStruct->Break2Polarity));
    assert_param(IS_LL_TIM_BREAK2_FILTER(TIM_BDTRInitStruct->Break2Filter));

    /* Set the BREAK2 input related BDTR bit-fields */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (TIM_BDTRInitStruct->Break2Filter));
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	6a1b      	ldr	r3, [r3, #32]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, TIM_BDTRInitStruct->Break2State);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, TIM_BDTRInitStruct->Break2Polarity);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3714      	adds	r7, #20
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	40012c00 	.word	0x40012c00
 8002100:	40013400 	.word	0x40013400

08002104 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a1b      	ldr	r3, [r3, #32]
 8002112:	f023 0201 	bic.w	r2, r3, #1
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f023 0303 	bic.w	r3, r3, #3
 8002132:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800213a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	6812      	ldr	r2, [r2, #0]
 8002142:	4313      	orrs	r3, r2
 8002144:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	f023 0202 	bic.w	r2, r3, #2
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	4313      	orrs	r3, r2
 8002152:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	f023 0201 	bic.w	r2, r3, #1
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	4313      	orrs	r3, r2
 8002160:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a22      	ldr	r2, [pc, #136]	; (80021f0 <OC1Config+0xec>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d00f      	beq.n	800218a <OC1Config+0x86>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a21      	ldr	r2, [pc, #132]	; (80021f4 <OC1Config+0xf0>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d00b      	beq.n	800218a <OC1Config+0x86>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a20      	ldr	r2, [pc, #128]	; (80021f8 <OC1Config+0xf4>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d007      	beq.n	800218a <OC1Config+0x86>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a1f      	ldr	r2, [pc, #124]	; (80021fc <OC1Config+0xf8>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d003      	beq.n	800218a <OC1Config+0x86>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a1e      	ldr	r2, [pc, #120]	; (8002200 <OC1Config+0xfc>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d11e      	bne.n	80021c8 <OC1Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	f023 0208 	bic.w	r2, r3, #8
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	695b      	ldr	r3, [r3, #20]
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4313      	orrs	r3, r2
 8002198:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	f023 0204 	bic.w	r2, r3, #4
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4313      	orrs	r3, r2
 80021a8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	4313      	orrs	r3, r2
 80021c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	4619      	mov	r1, r3
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7ff fdd0 	bl	8001d80 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3718      	adds	r7, #24
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40012c00 	.word	0x40012c00
 80021f4:	40013400 	.word	0x40013400
 80021f8:	40014000 	.word	0x40014000
 80021fc:	40014400 	.word	0x40014400
 8002200:	40014800 	.word	0x40014800

08002204 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	f023 0210 	bic.w	r2, r3, #16
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002232:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800223a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	6812      	ldr	r2, [r2, #0]
 8002242:	0212      	lsls	r2, r2, #8
 8002244:	4313      	orrs	r3, r2
 8002246:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	f023 0220 	bic.w	r2, r3, #32
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	011b      	lsls	r3, r3, #4
 8002254:	4313      	orrs	r3, r2
 8002256:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	f023 0210 	bic.w	r2, r3, #16
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	011b      	lsls	r3, r3, #4
 8002264:	4313      	orrs	r3, r2
 8002266:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a23      	ldr	r2, [pc, #140]	; (80022f8 <OC2Config+0xf4>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d00f      	beq.n	8002290 <OC2Config+0x8c>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a22      	ldr	r2, [pc, #136]	; (80022fc <OC2Config+0xf8>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d00b      	beq.n	8002290 <OC2Config+0x8c>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a21      	ldr	r2, [pc, #132]	; (8002300 <OC2Config+0xfc>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d007      	beq.n	8002290 <OC2Config+0x8c>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a20      	ldr	r2, [pc, #128]	; (8002304 <OC2Config+0x100>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d003      	beq.n	8002290 <OC2Config+0x8c>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a1f      	ldr	r2, [pc, #124]	; (8002308 <OC2Config+0x104>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d11f      	bne.n	80022d0 <OC2Config+0xcc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	019b      	lsls	r3, r3, #6
 800229c:	4313      	orrs	r3, r2
 800229e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	019b      	lsls	r3, r3, #6
 80022ac:	4313      	orrs	r3, r2
 80022ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	4313      	orrs	r3, r2
 80022be:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	4313      	orrs	r3, r2
 80022ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	4619      	mov	r1, r3
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7ff fd5a 	bl	8001d9c <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3718      	adds	r7, #24
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40012c00 	.word	0x40012c00
 80022fc:	40013400 	.word	0x40013400
 8002300:	40014000 	.word	0x40014000
 8002304:	40014400 	.word	0x40014400
 8002308:	40014800 	.word	0x40014800

0800230c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a1b      	ldr	r3, [r3, #32]
 800231a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a1b      	ldr	r3, [r3, #32]
 8002326:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f023 0303 	bic.w	r3, r3, #3
 800233a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	6812      	ldr	r2, [r2, #0]
 800234a:	4313      	orrs	r3, r2
 800234c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	021b      	lsls	r3, r3, #8
 800235a:	4313      	orrs	r3, r2
 800235c:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	021b      	lsls	r3, r3, #8
 800236a:	4313      	orrs	r3, r2
 800236c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a23      	ldr	r2, [pc, #140]	; (8002400 <OC3Config+0xf4>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d00f      	beq.n	8002396 <OC3Config+0x8a>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a22      	ldr	r2, [pc, #136]	; (8002404 <OC3Config+0xf8>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d00b      	beq.n	8002396 <OC3Config+0x8a>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a21      	ldr	r2, [pc, #132]	; (8002408 <OC3Config+0xfc>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d007      	beq.n	8002396 <OC3Config+0x8a>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a20      	ldr	r2, [pc, #128]	; (800240c <OC3Config+0x100>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d003      	beq.n	8002396 <OC3Config+0x8a>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a1f      	ldr	r2, [pc, #124]	; (8002410 <OC3Config+0x104>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d11f      	bne.n	80023d6 <OC3Config+0xca>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	029b      	lsls	r3, r3, #10
 80023a2:	4313      	orrs	r3, r2
 80023a4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	029b      	lsls	r3, r3, #10
 80023b2:	4313      	orrs	r3, r2
 80023b4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	011b      	lsls	r3, r3, #4
 80023c2:	4313      	orrs	r3, r2
 80023c4:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	69db      	ldr	r3, [r3, #28]
 80023d0:	015b      	lsls	r3, r3, #5
 80023d2:	4313      	orrs	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	4619      	mov	r1, r3
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f7ff fce5 	bl	8001db8 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3718      	adds	r7, #24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40012c00 	.word	0x40012c00
 8002404:	40013400 	.word	0x40013400
 8002408:	40014000 	.word	0x40014000
 800240c:	40014400 	.word	0x40014400
 8002410:	40014800 	.word	0x40014800

08002414 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002442:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800244a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	6812      	ldr	r2, [r2, #0]
 8002452:	0212      	lsls	r2, r2, #8
 8002454:	4313      	orrs	r3, r2
 8002456:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	031b      	lsls	r3, r3, #12
 8002464:	4313      	orrs	r3, r2
 8002466:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	031b      	lsls	r3, r3, #12
 8002474:	4313      	orrs	r3, r2
 8002476:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a17      	ldr	r2, [pc, #92]	; (80024d8 <OC4Config+0xc4>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d00f      	beq.n	80024a0 <OC4Config+0x8c>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a16      	ldr	r2, [pc, #88]	; (80024dc <OC4Config+0xc8>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d00b      	beq.n	80024a0 <OC4Config+0x8c>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4a15      	ldr	r2, [pc, #84]	; (80024e0 <OC4Config+0xcc>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d007      	beq.n	80024a0 <OC4Config+0x8c>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a14      	ldr	r2, [pc, #80]	; (80024e4 <OC4Config+0xd0>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d003      	beq.n	80024a0 <OC4Config+0x8c>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a13      	ldr	r2, [pc, #76]	; (80024e8 <OC4Config+0xd4>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d107      	bne.n	80024b0 <OC4Config+0x9c>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	019b      	lsls	r3, r3, #6
 80024ac:	4313      	orrs	r3, r2
 80024ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	4619      	mov	r1, r3
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7ff fc86 	bl	8001dd4 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3718      	adds	r7, #24
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40012c00 	.word	0x40012c00
 80024dc:	40013400 	.word	0x40013400
 80024e0:	40014000 	.word	0x40014000
 80024e4:	40014400 	.word	0x40014400
 80024e8:	40014800 	.word	0x40014800

080024ec <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800250c:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002514:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002518:	683a      	ldr	r2, [r7, #0]
 800251a:	6812      	ldr	r2, [r2, #0]
 800251c:	4313      	orrs	r3, r2
 800251e:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	041b      	lsls	r3, r3, #16
 800252c:	4313      	orrs	r3, r2
 800252e:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	041b      	lsls	r3, r3, #16
 800253c:	4313      	orrs	r3, r2
 800253e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a17      	ldr	r2, [pc, #92]	; (80025a0 <OC5Config+0xb4>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d00f      	beq.n	8002568 <OC5Config+0x7c>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a16      	ldr	r2, [pc, #88]	; (80025a4 <OC5Config+0xb8>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d00b      	beq.n	8002568 <OC5Config+0x7c>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a15      	ldr	r2, [pc, #84]	; (80025a8 <OC5Config+0xbc>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d007      	beq.n	8002568 <OC5Config+0x7c>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a14      	ldr	r2, [pc, #80]	; (80025ac <OC5Config+0xc0>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d003      	beq.n	8002568 <OC5Config+0x7c>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4a13      	ldr	r2, [pc, #76]	; (80025b0 <OC5Config+0xc4>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d109      	bne.n	800257c <OC5Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	021b      	lsls	r3, r3, #8
 8002576:	431a      	orrs	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	4619      	mov	r1, r3
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f7ff fc31 	bl	8001df0 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	40012c00 	.word	0x40012c00
 80025a4:	40013400 	.word	0x40013400
 80025a8:	40014000 	.word	0x40014000
 80025ac:	40014400 	.word	0x40014400
 80025b0:	40014800 	.word	0x40014800

080025b4 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a1b      	ldr	r3, [r3, #32]
 80025c2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d4:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	6812      	ldr	r2, [r2, #0]
 80025e4:	0212      	lsls	r2, r2, #8
 80025e6:	4313      	orrs	r3, r2
 80025e8:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	051b      	lsls	r3, r3, #20
 80025f6:	4313      	orrs	r3, r2
 80025f8:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	051b      	lsls	r3, r3, #20
 8002606:	4313      	orrs	r3, r2
 8002608:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a16      	ldr	r2, [pc, #88]	; (8002668 <OC6Config+0xb4>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d00f      	beq.n	8002632 <OC6Config+0x7e>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a15      	ldr	r2, [pc, #84]	; (800266c <OC6Config+0xb8>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d00b      	beq.n	8002632 <OC6Config+0x7e>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a14      	ldr	r2, [pc, #80]	; (8002670 <OC6Config+0xbc>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d007      	beq.n	8002632 <OC6Config+0x7e>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a13      	ldr	r2, [pc, #76]	; (8002674 <OC6Config+0xc0>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d003      	beq.n	8002632 <OC6Config+0x7e>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a12      	ldr	r2, [pc, #72]	; (8002678 <OC6Config+0xc4>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d109      	bne.n	8002646 <OC6Config+0x92>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	029b      	lsls	r3, r3, #10
 8002640:	431a      	orrs	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	68ba      	ldr	r2, [r7, #8]
 800264a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	4619      	mov	r1, r3
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7ff fbdc 	bl	8001e10 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40012c00 	.word	0x40012c00
 800266c:	40013400 	.word	0x40013400
 8002670:	40014000 	.word	0x40014000
 8002674:	40014400 	.word	0x40014400
 8002678:	40014800 	.word	0x40014800

0800267c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	fbb2 f3f3 	udiv	r3, r2, r3
 800268e:	4a07      	ldr	r2, [pc, #28]	; (80026ac <LL_InitTick+0x30>)
 8002690:	3b01      	subs	r3, #1
 8002692:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002694:	4b05      	ldr	r3, [pc, #20]	; (80026ac <LL_InitTick+0x30>)
 8002696:	2200      	movs	r2, #0
 8002698:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800269a:	4b04      	ldr	r3, [pc, #16]	; (80026ac <LL_InitTick+0x30>)
 800269c:	2205      	movs	r2, #5
 800269e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	e000e010 	.word	0xe000e010

080026b0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80026b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f7ff ffdd 	bl	800267c <LL_InitTick>
}
 80026c2:	bf00      	nop
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
	...

080026cc <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80026d4:	4a04      	ldr	r2, [pc, #16]	; (80026e8 <LL_SetSystemCoreClock+0x1c>)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6013      	str	r3, [r2, #0]
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	20000000 	.word	0x20000000

080026ec <__libc_init_array>:
 80026ec:	b570      	push	{r4, r5, r6, lr}
 80026ee:	4e0d      	ldr	r6, [pc, #52]	; (8002724 <__libc_init_array+0x38>)
 80026f0:	4c0d      	ldr	r4, [pc, #52]	; (8002728 <__libc_init_array+0x3c>)
 80026f2:	1ba4      	subs	r4, r4, r6
 80026f4:	10a4      	asrs	r4, r4, #2
 80026f6:	2500      	movs	r5, #0
 80026f8:	42a5      	cmp	r5, r4
 80026fa:	d109      	bne.n	8002710 <__libc_init_array+0x24>
 80026fc:	4e0b      	ldr	r6, [pc, #44]	; (800272c <__libc_init_array+0x40>)
 80026fe:	4c0c      	ldr	r4, [pc, #48]	; (8002730 <__libc_init_array+0x44>)
 8002700:	f000 f820 	bl	8002744 <_init>
 8002704:	1ba4      	subs	r4, r4, r6
 8002706:	10a4      	asrs	r4, r4, #2
 8002708:	2500      	movs	r5, #0
 800270a:	42a5      	cmp	r5, r4
 800270c:	d105      	bne.n	800271a <__libc_init_array+0x2e>
 800270e:	bd70      	pop	{r4, r5, r6, pc}
 8002710:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002714:	4798      	blx	r3
 8002716:	3501      	adds	r5, #1
 8002718:	e7ee      	b.n	80026f8 <__libc_init_array+0xc>
 800271a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800271e:	4798      	blx	r3
 8002720:	3501      	adds	r5, #1
 8002722:	e7f2      	b.n	800270a <__libc_init_array+0x1e>
 8002724:	08002774 	.word	0x08002774
 8002728:	08002774 	.word	0x08002774
 800272c:	08002774 	.word	0x08002774
 8002730:	08002778 	.word	0x08002778

08002734 <memset>:
 8002734:	4402      	add	r2, r0
 8002736:	4603      	mov	r3, r0
 8002738:	4293      	cmp	r3, r2
 800273a:	d100      	bne.n	800273e <memset+0xa>
 800273c:	4770      	bx	lr
 800273e:	f803 1b01 	strb.w	r1, [r3], #1
 8002742:	e7f9      	b.n	8002738 <memset+0x4>

08002744 <_init>:
 8002744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002746:	bf00      	nop
 8002748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800274a:	bc08      	pop	{r3}
 800274c:	469e      	mov	lr, r3
 800274e:	4770      	bx	lr

08002750 <_fini>:
 8002750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002752:	bf00      	nop
 8002754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002756:	bc08      	pop	{r3}
 8002758:	469e      	mov	lr, r3
 800275a:	4770      	bx	lr
